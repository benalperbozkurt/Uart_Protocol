
UART_Protocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ae0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009c68  08009c68  0000ac68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c88  08009c88  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009c88  08009c88  0000ac88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c90  08009c90  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c90  08009c90  0000ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c94  08009c94  0000ac94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009c98  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a64  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae0  20000ae0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018fbf  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e85  00000000  00000000  0002406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00027ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f5f  00000000  00000000  000292e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bd3  00000000  00000000  0002a23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e911  00000000  00000000  0004de12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0a5  00000000  00000000  0006c723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a7c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056c0  00000000  00000000  0013a80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013fecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c50 	.word	0x08009c50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009c50 	.word	0x08009c50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fccc 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f84c 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f972 	bl	80007b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004cc:	f000 f8b2 	bl	8000634 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d0:	f000 f8de 	bl	8000690 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d4:	f000 f90c 	bl	80006f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d8:	f008 ff64 	bl	80093a4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f93e 	bl	800075c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t pData[1000]="w";
 80004e0:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80004e4:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 80004e8:	2277      	movs	r2, #119	@ 0x77
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	3304      	adds	r3, #4
 80004ee:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f009 fb1d 	bl	8009b34 <memset>
for(int i=0;i<=1000;i++){
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8000500:	e00f      	b.n	8000522 <main+0x6a>
	pData[i]="w";
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <main+0x9c>)
 8000504:	b2d9      	uxtb	r1, r3
 8000506:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800050a:	f5a3 727b 	sub.w	r2, r3, #1004	@ 0x3ec
 800050e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000512:	4413      	add	r3, r2
 8000514:	460a      	mov	r2, r1
 8000516:	701a      	strb	r2, [r3, #0]
for(int i=0;i<=1000;i++){
 8000518:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 800051c:	3301      	adds	r3, #1
 800051e:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8000522:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	@ 0x3ec
 8000526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800052a:	ddea      	ble.n	8000502 <main+0x4a>
	}
HAL_UART_Transmit_IT(&huart2, pData, sizeof(pData));
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000532:	4619      	mov	r1, r3
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0xa0>)
 8000536:	f004 fe4c 	bl	80051d2 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800053a:	f008 ff59 	bl	80093f0 <MX_USB_HOST_Process>
HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 800053e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <main+0xa4>)
 8000544:	f001 f879 	bl	800163a <HAL_GPIO_TogglePin>
HAL_Delay(250);
 8000548:	20fa      	movs	r0, #250	@ 0xfa
 800054a:	f000 fcf9 	bl	8000f40 <HAL_Delay>
    MX_USB_HOST_Process();
 800054e:	bf00      	nop
 8000550:	e7f3      	b.n	800053a <main+0x82>
 8000552:	bf00      	nop
 8000554:	08009c68 	.word	0x08009c68
 8000558:	2000018c 	.word	0x2000018c
 800055c:	40020c00 	.word	0x40020c00

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2230      	movs	r2, #48	@ 0x30
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f009 fae0 	bl	8009b34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	4b28      	ldr	r3, [pc, #160]	@ (800062c <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <SystemClock_Config+0xcc>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a21      	ldr	r2, [pc, #132]	@ (8000630 <SystemClock_Config+0xd0>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 ff40 	bl	800446c <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f2:	f000 f9ef 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000602:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2105      	movs	r1, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f004 f9a1 	bl	800495c <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000620:	f000 f9d8 	bl	80009d4 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	@ 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	@ (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f003 f917 	bl	80038a4 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f9aa 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000098 	.word	0x20000098
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_I2S3_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <MX_I2S3_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069a:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <MX_I2S3_Init+0x5c>)
 80006ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_I2S3_Init+0x54>)
 80006d0:	f003 fa2c 	bl	8003b2c <HAL_I2S_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006da:	f000 f97b 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000ec 	.word	0x200000ec
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	@ (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f004 fc6d 	bl	8005020 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f942 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000134 	.word	0x20000134
 8000758:	40013000 	.word	0x40013000

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f004 fccd 	bl	8005132 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f919 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000018c 	.word	0x2000018c
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	@ 0x30
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	4b72      	ldr	r3, [pc, #456]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a71      	ldr	r2, [pc, #452]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	61bb      	str	r3, [r7, #24]
 80007e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	4b6b      	ldr	r3, [pc, #428]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a6a      	ldr	r2, [pc, #424]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b68      	ldr	r3, [pc, #416]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b64      	ldr	r3, [pc, #400]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a63      	ldr	r2, [pc, #396]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b61      	ldr	r3, [pc, #388]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b5d      	ldr	r3, [pc, #372]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a5c      	ldr	r2, [pc, #368]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b5a      	ldr	r3, [pc, #360]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b56      	ldr	r3, [pc, #344]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a55      	ldr	r2, [pc, #340]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b53      	ldr	r3, [pc, #332]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a4e      	ldr	r2, [pc, #312]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2108      	movs	r1, #8
 8000872:	4849      	ldr	r0, [pc, #292]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 8000874:	f000 fec8 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	4847      	ldr	r0, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1ec>)
 800087e:	f000 fec3 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000882:	2200      	movs	r2, #0
 8000884:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000888:	4845      	ldr	r0, [pc, #276]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 800088a:	f000 febd 	bl	8001608 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 80008a6:	f000 fd13 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4836      	ldr	r0, [pc, #216]	@ (800099c <MX_GPIO_Init+0x1ec>)
 80008c2:	f000 fd05 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fcf5 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	482a      	ldr	r0, [pc, #168]	@ (80009a4 <MX_GPIO_Init+0x1f4>)
 80008fc:	f000 fce8 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000900:	2304      	movs	r3, #4
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4825      	ldr	r0, [pc, #148]	@ (80009a8 <MX_GPIO_Init+0x1f8>)
 8000914:	f000 fcdc 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <MX_GPIO_Init+0x1f8>)
 8000936:	f000 fccb 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800093a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4813      	ldr	r0, [pc, #76]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 8000954:	f000 fcbc 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000958:	2320      	movs	r3, #32
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <MX_GPIO_Init+0x1f0>)
 800096c:	f000 fcb0 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000970:	2302      	movs	r3, #2
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000974:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0x1e8>)
 8000986:	f000 fca3 	bl	80012d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3730      	adds	r7, #48	@ 0x30
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40021000 	.word	0x40021000
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400

080009ac <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	uint8_t pData[]="w";
 80009b4:	2377      	movs	r3, #119	@ 0x77
 80009b6:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit_IT(&huart2, pData, sizeof(pData));
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2202      	movs	r2, #2
 80009be:	4619      	mov	r1, r3
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <HAL_UART_TxCpltCallback+0x24>)
 80009c2:	f004 fc06 	bl	80051d2 <HAL_UART_Transmit_IT>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000018c 	.word	0x2000018c

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1e:	2007      	movs	r0, #7
 8000a20:	f000 fb82 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12c      	bne.n	8000aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480c      	ldr	r0, [pc, #48]	@ (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8c:	f000 fc20 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	@ 0x38
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a31      	ldr	r2, [pc, #196]	@ (8000bb0 <HAL_I2S_MspInit+0xf0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d15a      	bne.n	8000ba6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000af4:	23c0      	movs	r3, #192	@ 0xc0
 8000af6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f94b 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b0c:	f7ff ff62 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b64:	2310      	movs	r3, #16
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b74:	2306      	movs	r3, #6
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480e      	ldr	r0, [pc, #56]	@ (8000bb8 <HAL_I2S_MspInit+0xf8>)
 8000b80:	f000 fba6 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b84:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b96:	2306      	movs	r3, #6
 8000b98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <HAL_I2S_MspInit+0xfc>)
 8000ba2:	f000 fb95 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	@ 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40003c00 	.word	0x40003c00
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <HAL_SPI_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c1a:	23e0      	movs	r3, #224	@ 0xe0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <HAL_SPI_MspInit+0x8c>)
 8000c36:	f000 fb4b 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <HAL_UART_MspInit+0x94>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d133      	bne.n	8000cda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_UART_MspInit+0x98>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000caa:	230c      	movs	r3, #12
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4809      	ldr	r0, [pc, #36]	@ (8000cec <HAL_UART_MspInit+0x9c>)
 8000cc6:	f000 fb03 	bl	80012d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2026      	movs	r0, #38	@ 0x26
 8000cd0:	f000 fa35 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd4:	2026      	movs	r0, #38	@ 0x26
 8000cd6:	f000 fa4e 	bl	8001176 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8db 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <USART2_IRQHandler+0x10>)
 8000d56:	f004 fa73 	bl	8005240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000018c 	.word	0x2000018c

08000d64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <OTG_FS_IRQHandler+0x10>)
 8000d6a:	f000 ff61 	bl	8001c30 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200005b8 	.word	0x200005b8

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f008 fedc 	bl	8009b64 <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	200001d4 	.word	0x200001d4
 8000de0:	20000ae0 	.word	0x20000ae0

08000de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e36:	f008 fe9b 	bl	8009b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fb3d 	bl	80004b8 <main>
  bx  lr    
 8000e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e4c:	08009c98 	.word	0x08009c98
  ldr r2, =_sbss
 8000e50:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e54:	20000ae0 	.word	0x20000ae0

08000e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC_IRQHandler>
	...

08000e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e60:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <HAL_Init+0x40>)
 8000e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <HAL_Init+0x40>)
 8000e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x40>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f94f 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fda6 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023c00 	.word	0x40023c00

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f967 	bl	8001192 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f92f 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	200001d8 	.word	0x200001d8

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001d8 	.word	0x200001d8

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	@ (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	@ (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	@ (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	@ 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff29 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff3e 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff31 	bl	8000fec <__NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffa2 	bl	80010e4 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff feb6 	bl	8000f28 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d008      	beq.n	80011dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e052      	b.n	8001282 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0216 	bic.w	r2, r2, #22
 80011ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <HAL_DMA_Abort+0x62>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0208 	bic.w	r2, r2, #8
 800121a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800122c:	e013      	b.n	8001256 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122e:	f7ff fe7b 	bl	8000f28 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b05      	cmp	r3, #5
 800123a:	d90c      	bls.n	8001256 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e015      	b.n	8001282 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e4      	bne.n	800122e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001268:	223f      	movs	r2, #63	@ 0x3f
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d004      	beq.n	80012a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e00c      	b.n	80012c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2205      	movs	r2, #5
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e16b      	b.n	80015c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 815a 	bne.w	80015be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80b4 	beq.w	80015be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b60      	ldr	r3, [pc, #384]	@ (80015dc <HAL_GPIO_Init+0x30c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a5f      	ldr	r2, [pc, #380]	@ (80015dc <HAL_GPIO_Init+0x30c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b5d      	ldr	r3, [pc, #372]	@ (80015dc <HAL_GPIO_Init+0x30c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a5b      	ldr	r2, [pc, #364]	@ (80015e0 <HAL_GPIO_Init+0x310>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a52      	ldr	r2, [pc, #328]	@ (80015e4 <HAL_GPIO_Init+0x314>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d02b      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a51      	ldr	r2, [pc, #324]	@ (80015e8 <HAL_GPIO_Init+0x318>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d025      	beq.n	80014f2 <HAL_GPIO_Init+0x222>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a50      	ldr	r2, [pc, #320]	@ (80015ec <HAL_GPIO_Init+0x31c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d01f      	beq.n	80014ee <HAL_GPIO_Init+0x21e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	@ (80015f0 <HAL_GPIO_Init+0x320>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d019      	beq.n	80014ea <HAL_GPIO_Init+0x21a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <HAL_GPIO_Init+0x324>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d013      	beq.n	80014e6 <HAL_GPIO_Init+0x216>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	@ (80015f8 <HAL_GPIO_Init+0x328>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00d      	beq.n	80014e2 <HAL_GPIO_Init+0x212>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	@ (80015fc <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <HAL_GPIO_Init+0x20e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <HAL_GPIO_Init+0x330>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <HAL_GPIO_Init+0x20a>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e00e      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014da:	2308      	movs	r3, #8
 80014dc:	e00c      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00a      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014e2:	2305      	movs	r3, #5
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x228>
 80014f6:	2300      	movs	r3, #0
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	4935      	ldr	r1, [pc, #212]	@ (80015e0 <HAL_GPIO_Init+0x310>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a32      	ldr	r2, [pc, #200]	@ (8001604 <HAL_GPIO_Init+0x334>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a27      	ldr	r2, [pc, #156]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156a:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <HAL_GPIO_Init+0x334>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158e:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b8:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <HAL_GPIO_Init+0x334>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f67f ae90 	bls.w	80012ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40021400 	.word	0x40021400
 80015fc:	40021800 	.word	0x40021800
 8001600:	40021c00 	.word	0x40021c00
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800164c:	887a      	ldrh	r2, [r7, #2]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	041a      	lsls	r2, r3, #16
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43d9      	mvns	r1, r3
 8001658:	887b      	ldrh	r3, [r7, #2]
 800165a:	400b      	ands	r3, r1
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af02      	add	r7, sp, #8
 8001674:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e059      	b.n	8001734 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f007 fee0 	bl	8009460 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ae:	d102      	bne.n	80016b6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f004 fcf9 	bl	80060b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7c1a      	ldrb	r2, [r3, #16]
 80016c8:	f88d 2000 	strb.w	r2, [sp]
 80016cc:	3304      	adds	r3, #4
 80016ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d0:	f004 fc7a 	bl	8005fc8 <USB_CoreInit>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2202      	movs	r2, #2
 80016de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e026      	b.n	8001734 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2101      	movs	r1, #1
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fcf1 	bl	80060d4 <USB_SetCurrentMode>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e017      	b.n	8001734 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7c1a      	ldrb	r2, [r3, #16]
 800170c:	f88d 2000 	strb.w	r2, [sp]
 8001710:	3304      	adds	r3, #4
 8001712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001714:	f004 fe94 	bl	8006440 <USB_HostInit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d005      	beq.n	800172a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2202      	movs	r2, #2
 8001722:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e004      	b.n	8001734 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b08b      	sub	sp, #44	@ 0x2c
 8001740:	af04      	add	r7, sp, #16
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4603      	mov	r3, r0
 800174c:	70fb      	strb	r3, [r7, #3]
 800174e:	460b      	mov	r3, r1
 8001750:	70bb      	strb	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001756:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001758:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_HCD_HC_Init+0x2c>
 8001764:	2302      	movs	r3, #2
 8001766:	e09d      	b.n	80018a4 <HAL_HCD_HC_Init+0x168>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3319      	adds	r3, #25
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	3314      	adds	r3, #20
 8001794:	787a      	ldrb	r2, [r7, #1]
 8001796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3315      	adds	r3, #21
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	3326      	adds	r3, #38	@ 0x26
 80017bc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017c2:	78fa      	ldrb	r2, [r7, #3]
 80017c4:	78bb      	ldrb	r3, [r7, #2]
 80017c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017ca:	b2d8      	uxtb	r0, r3
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	440b      	add	r3, r1
 80017d8:	3316      	adds	r3, #22
 80017da:	4602      	mov	r2, r0
 80017dc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fbc8 	bl	8001f78 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80017e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	da0a      	bge.n	8001806 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	4613      	mov	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3317      	adds	r3, #23
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e009      	b.n	800181a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3317      	adds	r3, #23
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f004 ff72 	bl	8006708 <USB_GetHostSpeed>
 8001824:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001826:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10b      	bne.n	8001846 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800182e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_HCD_HC_Init+0x10a>
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d104      	bne.n	8001846 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001840:	d901      	bls.n	8001846 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001842:	23bc      	movs	r3, #188	@ 0xbc
 8001844:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	3318      	adds	r3, #24
 8001856:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800185a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	b298      	uxth	r0, r3
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	3328      	adds	r3, #40	@ 0x28
 8001870:	4602      	mov	r2, r0
 8001872:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	b29b      	uxth	r3, r3
 800187c:	787c      	ldrb	r4, [r7, #1]
 800187e:	78ba      	ldrb	r2, [r7, #2]
 8001880:	78f9      	ldrb	r1, [r7, #3]
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f004 ff61 	bl	8006758 <USB_HC_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_HCD_HC_Halt+0x1e>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e00f      	b.n	80018ea <HAL_HCD_HC_Halt+0x3e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f005 faf3 	bl	8006ec6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	70fb      	strb	r3, [r7, #3]
 8001906:	460b      	mov	r3, r1
 8001908:	70bb      	strb	r3, [r7, #2]
 800190a:	4613      	mov	r3, r2
 800190c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3317      	adds	r3, #23
 800191e:	78ba      	ldrb	r2, [r7, #2]
 8001920:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	3326      	adds	r3, #38	@ 0x26
 8001932:	787a      	ldrb	r2, [r7, #1]
 8001934:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001936:	7c3b      	ldrb	r3, [r7, #16]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d114      	bne.n	8001966 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	332a      	adds	r3, #42	@ 0x2a
 800194c:	2203      	movs	r2, #3
 800194e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3319      	adds	r3, #25
 8001960:	7f3a      	ldrb	r2, [r7, #28]
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e009      	b.n	800197a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	332a      	adds	r3, #42	@ 0x2a
 8001976:	2202      	movs	r2, #2
 8001978:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	2b03      	cmp	r3, #3
 800197e:	f200 8102 	bhi.w	8001b86 <HAL_HCD_HC_SubmitRequest+0x292>
 8001982:	a201      	add	r2, pc, #4	@ (adr r2, 8001988 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001988:	08001999 	.word	0x08001999
 800198c:	08001b71 	.word	0x08001b71
 8001990:	08001a5d 	.word	0x08001a5d
 8001994:	08001ae7 	.word	0x08001ae7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001998:	7c3b      	ldrb	r3, [r7, #16]
 800199a:	2b01      	cmp	r3, #1
 800199c:	f040 80f5 	bne.w	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80019a0:	78bb      	ldrb	r3, [r7, #2]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d12d      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80019a6:	8b3b      	ldrh	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	333d      	adds	r3, #61	@ 0x3d
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	1a9b      	subs	r3, r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	333d      	adds	r3, #61	@ 0x3d
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	332a      	adds	r3, #42	@ 0x2a
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80019ea:	e0ce      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	332a      	adds	r3, #42	@ 0x2a
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e0c3      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	331a      	adds	r3, #26
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	f040 80b8 	bne.w	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	333c      	adds	r3, #60	@ 0x3c
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	332a      	adds	r3, #42	@ 0x2a
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
      break;
 8001a44:	e0a1      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a46:	78fa      	ldrb	r2, [r7, #3]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	332a      	adds	r3, #42	@ 0x2a
 8001a56:	2202      	movs	r2, #2
 8001a58:	701a      	strb	r2, [r3, #0]
      break;
 8001a5a:	e096      	b.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d120      	bne.n	8001aa4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a62:	78fa      	ldrb	r2, [r7, #3]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	011b      	lsls	r3, r3, #4
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	333d      	adds	r3, #61	@ 0x3d
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	011b      	lsls	r3, r3, #4
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	332a      	adds	r3, #42	@ 0x2a
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a8c:	e07e      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a8e:	78fa      	ldrb	r2, [r7, #3]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	332a      	adds	r3, #42	@ 0x2a
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
      break;
 8001aa2:	e073      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa4:	78fa      	ldrb	r2, [r7, #3]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	011b      	lsls	r3, r3, #4
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	333c      	adds	r3, #60	@ 0x3c
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	332a      	adds	r3, #42	@ 0x2a
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e05d      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	332a      	adds	r3, #42	@ 0x2a
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
      break;
 8001ae4:	e052      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ae6:	78bb      	ldrb	r3, [r7, #2]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d120      	bne.n	8001b2e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	1a9b      	subs	r3, r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	333d      	adds	r3, #61	@ 0x3d
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b02:	78fa      	ldrb	r2, [r7, #3]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	332a      	adds	r3, #42	@ 0x2a
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b16:	e039      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	332a      	adds	r3, #42	@ 0x2a
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
      break;
 8001b2c:	e02e      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	333c      	adds	r3, #60	@ 0x3c
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10a      	bne.n	8001b5a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	332a      	adds	r3, #42	@ 0x2a
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
      break;
 8001b58:	e018      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	332a      	adds	r3, #42	@ 0x2a
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	701a      	strb	r2, [r3, #0]
      break;
 8001b6e:	e00d      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	332a      	adds	r3, #42	@ 0x2a
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
      break;
 8001b84:	e002      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001b86:	bf00      	nop
 8001b88:	e000      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b8a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	332c      	adds	r3, #44	@ 0x2c
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	8b39      	ldrh	r1, [r7, #24]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4403      	add	r3, r0
 8001bb0:	3334      	adds	r3, #52	@ 0x34
 8001bb2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001bb4:	78fa      	ldrb	r2, [r7, #3]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	334c      	adds	r3, #76	@ 0x4c
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bc8:	78fa      	ldrb	r2, [r7, #3]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3338      	adds	r3, #56	@ 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3315      	adds	r3, #21
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	334d      	adds	r3, #77	@ 0x4d
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	3310      	adds	r3, #16
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	1d19      	adds	r1, r3, #4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	799b      	ldrb	r3, [r3, #6]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f004 fec6 	bl	80069b0 <USB_HC_StartXfer>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop

08001c30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f004 fbba 	bl	80063c0 <USB_GetMode>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	f040 80fb 	bne.w	8001e4a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 fb7d 	bl	8006358 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80f1 	beq.w	8001e48 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fb74 	bl	8006358 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c7a:	d104      	bne.n	8001c86 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fb64 	bl	8006358 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c9a:	d104      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fb54 	bl	8006358 <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001cba:	d104      	bne.n	8001cc6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001cc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fb44 	bl	8006358 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d103      	bne.n	8001ce2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fb36 	bl	8006358 <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001cf6:	d120      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d00:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d113      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d12:	2110      	movs	r1, #16
 8001d14:	6938      	ldr	r0, [r7, #16]
 8001d16:	f004 fa29 	bl	800616c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d1a:	6938      	ldr	r0, [r7, #16]
 8001d1c:	f004 fa58 	bl	80061d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7a5b      	ldrb	r3, [r3, #9]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d105      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fc4a 	bl	80065c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f007 fc11 	bl	800955c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 fb0a 	bl	8006358 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d4e:	d102      	bne.n	8001d56 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f001 fd33 	bl	80037bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fafc 	bl	8006358 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d106      	bne.n	8001d78 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f007 fbda 	bl	8009524 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 faeb 	bl	8006358 <USB_ReadInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d8c:	d139      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f005 f886 	bl	8006ea4 <USB_HC_ReadInterrupt>
 8001d98:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e025      	b.n	8001dec <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dca:	d106      	bne.n	8001dda <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f905 	bl	8001fe2 <HCD_HC_IN_IRQHandler>
 8001dd8:	e005      	b.n	8001de6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 ff67 	bl	8002cb4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	795b      	ldrb	r3, [r3, #5]
 8001df0:	461a      	mov	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d3d3      	bcc.n	8001da0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 faa6 	bl	8006358 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b10      	cmp	r3, #16
 8001e14:	d101      	bne.n	8001e1a <HAL_HCD_IRQHandler+0x1ea>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_HCD_IRQHandler+0x1ec>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d014      	beq.n	8001e4a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0210 	bic.w	r2, r2, #16
 8001e2e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 fbe4 	bl	80035fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699a      	ldr	r2, [r3, #24]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0210 	orr.w	r2, r2, #16
 8001e44:	619a      	str	r2, [r3, #24]
 8001e46:	e000      	b.n	8001e4a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001e48:	bf00      	nop
    }
  }
}
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_HCD_Start+0x16>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e013      	b.n	8001e8e <HAL_HCD_Start+0x3e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fc0e 	bl	8006696 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 f906 	bl	8006090 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_HCD_Stop+0x16>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e00d      	b.n	8001ec8 <HAL_HCD_Stop+0x32>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 f961 	bl	8007180 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fbb0 	bl	8006642 <USB_ResetPort>
 8001ee2:	4603      	mov	r3, r0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	334c      	adds	r3, #76	@ 0x4c
 8001f08:	781b      	ldrb	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	3338      	adds	r3, #56	@ 0x38
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fbf2 	bl	8006736 <USB_GetCurrentFrame>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fbcd 	bl	8006708 <USB_GetHostSpeed>
 8001f6e:	4603      	mov	r3, r0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	331a      	adds	r3, #26
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	331b      	adds	r3, #27
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3325      	adds	r3, #37	@ 0x25
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001fc0:	78fa      	ldrb	r2, [r7, #3]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3324      	adds	r3, #36	@ 0x24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f004 f9bc 	bl	800637e <USB_ReadChInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d11a      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2304      	movs	r3, #4
 8002020:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	334d      	adds	r3, #77	@ 0x4d
 8002032:	2207      	movs	r2, #7
 8002034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f004 ff41 	bl	8006ec6 <USB_HC_Halt>
 8002044:	e09e      	b.n	8002184 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f004 f995 	bl	800637e <USB_ReadChInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800205e:	d11b      	bne.n	8002098 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002072:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	334d      	adds	r3, #77	@ 0x4d
 8002084:	2208      	movs	r2, #8
 8002086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f004 ff18 	bl	8006ec6 <USB_HC_Halt>
 8002096:	e075      	b.n	8002184 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 f96c 	bl	800637e <USB_ReadChInterrupts>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d11a      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020bc:	461a      	mov	r2, r3
 80020be:	2308      	movs	r3, #8
 80020c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	334d      	adds	r3, #77	@ 0x4d
 80020d2:	2206      	movs	r2, #6
 80020d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f004 fef1 	bl	8006ec6 <USB_HC_Halt>
 80020e4:	e04e      	b.n	8002184 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 f945 	bl	800637e <USB_ReadChInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fe:	d11b      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002112:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334d      	adds	r3, #77	@ 0x4d
 8002124:	2209      	movs	r2, #9
 8002126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fec8 	bl	8006ec6 <USB_HC_Halt>
 8002136:	e025      	b.n	8002184 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f004 f91c 	bl	800637e <USB_ReadChInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214c:	2b80      	cmp	r3, #128	@ 0x80
 800214e:	d119      	bne.n	8002184 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215c:	461a      	mov	r2, r3
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	334d      	adds	r3, #77	@ 0x4d
 8002172:	2207      	movs	r2, #7
 8002174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	78fa      	ldrb	r2, [r7, #3]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fea1 	bl	8006ec6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f004 f8f6 	bl	800637e <USB_ReadChInterrupts>
 8002192:	4603      	mov	r3, r0
 8002194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800219c:	d112      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fe8d 	bl	8006ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b8:	461a      	mov	r2, r3
 80021ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021be:	6093      	str	r3, [r2, #8]
 80021c0:	f000 bd75 	b.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f8d6 	bl	800637e <USB_ReadChInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 8128 	bne.w	800242e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021de:	78fb      	ldrb	r3, [r7, #3]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ea:	461a      	mov	r2, r3
 80021ec:	2320      	movs	r3, #32
 80021ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	331b      	adds	r3, #27
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d119      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	331b      	adds	r3, #27
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	0151      	lsls	r1, r2, #5
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	440a      	add	r2, r1
 8002230:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002238:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	799b      	ldrb	r3, [r3, #6]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d01b      	beq.n	800227a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3330      	adds	r3, #48	@ 0x30
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	1ac9      	subs	r1, r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3338      	adds	r3, #56	@ 0x38
 8002278:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334d      	adds	r3, #77	@ 0x4d
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3344      	adds	r3, #68	@ 0x44
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ae:	461a      	mov	r2, r3
 80022b0:	2301      	movs	r3, #1
 80022b2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3326      	adds	r3, #38	@ 0x26
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3326      	adds	r3, #38	@ 0x26
 80022da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d110      	bne.n	8002302 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f004 fdec 	bl	8006ec6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2310      	movs	r3, #16
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	e03d      	b.n	800237e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	3326      	adds	r3, #38	@ 0x26
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d00a      	beq.n	800232e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3326      	adds	r3, #38	@ 0x26
 8002328:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800232a:	2b01      	cmp	r3, #1
 800232c:	d127      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002348:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800234c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	334c      	adds	r3, #76	@ 0x4c
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	334c      	adds	r3, #76	@ 0x4c
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f007 f8fd 	bl	8009578 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	799b      	ldrb	r3, [r3, #6]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d13b      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3338      	adds	r3, #56	@ 0x38
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4403      	add	r3, r0
 80023a6:	3328      	adds	r3, #40	@ 0x28
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	440b      	add	r3, r1
 80023ac:	1e59      	subs	r1, r3, #1
 80023ae:	78fa      	ldrb	r2, [r7, #3]
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4403      	add	r3, r0
 80023bc:	3328      	adds	r3, #40	@ 0x28
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8470 	beq.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	333c      	adds	r3, #60	@ 0x3c
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	f083 0301 	eor.w	r3, r3, #1
 80023e6:	b2d8      	uxtb	r0, r3
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	333c      	adds	r3, #60	@ 0x3c
 80023f6:	4602      	mov	r2, r0
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	f000 bc58 	b.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	333c      	adds	r3, #60	@ 0x3c
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	f083 0301 	eor.w	r3, r3, #1
 8002416:	b2d8      	uxtb	r0, r3
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	333c      	adds	r3, #60	@ 0x3c
 8002426:	4602      	mov	r2, r0
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	f000 bc40 	b.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 ffa1 	bl	800637e <USB_ReadChInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b20      	cmp	r3, #32
 8002444:	d131      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2320      	movs	r3, #32
 8002456:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	331a      	adds	r3, #26
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	f040 841f 	bne.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	331b      	adds	r3, #27
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002484:	78fa      	ldrb	r2, [r7, #3]
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	334d      	adds	r3, #77	@ 0x4d
 8002494:	2203      	movs	r2, #3
 8002496:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f004 fd10 	bl	8006ec6 <USB_HC_Halt>
 80024a6:	f000 bc02 	b.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 ff63 	bl	800637e <USB_ReadChInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f040 8305 	bne.w	8002ace <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2302      	movs	r3, #2
 80024d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	334d      	adds	r3, #77	@ 0x4d
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d114      	bne.n	8002516 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	334d      	adds	r3, #77	@ 0x4d
 80024fc:	2202      	movs	r2, #2
 80024fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	334c      	adds	r3, #76	@ 0x4c
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e2cc      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	334d      	adds	r3, #77	@ 0x4d
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b06      	cmp	r3, #6
 800252a:	d114      	bne.n	8002556 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	334d      	adds	r3, #77	@ 0x4d
 800253c:	2202      	movs	r2, #2
 800253e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002540:	78fa      	ldrb	r2, [r7, #3]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	011b      	lsls	r3, r3, #4
 8002548:	1a9b      	subs	r3, r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	334c      	adds	r3, #76	@ 0x4c
 8002550:	2205      	movs	r2, #5
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e2ac      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	334d      	adds	r3, #77	@ 0x4d
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b07      	cmp	r3, #7
 800256a:	d00b      	beq.n	8002584 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334d      	adds	r3, #77	@ 0x4d
 800257c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800257e:	2b09      	cmp	r3, #9
 8002580:	f040 80a6 	bne.w	80026d0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	334d      	adds	r3, #77	@ 0x4d
 8002594:	2202      	movs	r2, #2
 8002596:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3344      	adds	r3, #68	@ 0x44
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1c59      	adds	r1, r3, #1
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	011b      	lsls	r3, r3, #4
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4403      	add	r3, r0
 80025b8:	3344      	adds	r3, #68	@ 0x44
 80025ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3344      	adds	r3, #68	@ 0x44
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d943      	bls.n	800265a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3344      	adds	r3, #68	@ 0x44
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	331a      	adds	r3, #26
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d123      	bne.n	8002644 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	331b      	adds	r3, #27
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	331c      	adds	r3, #28
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	78fa      	ldrb	r2, [r7, #3]
 8002634:	0151      	lsls	r1, r2, #5
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	440a      	add	r2, r1
 800263a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800263e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002642:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334c      	adds	r3, #76	@ 0x4c
 8002654:	2204      	movs	r2, #4
 8002656:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002658:	e229      	b.n	8002aae <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	334c      	adds	r3, #76	@ 0x4c
 800266a:	2202      	movs	r2, #2
 800266c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3326      	adds	r3, #38	@ 0x26
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3326      	adds	r3, #38	@ 0x26
 8002694:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002696:	2b02      	cmp	r3, #2
 8002698:	f040 8209 	bne.w	8002aae <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026b2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026ce:	e1ee      	b.n	8002aae <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	334d      	adds	r3, #77	@ 0x4d
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	f040 80c8 	bne.w	8002878 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	334d      	adds	r3, #77	@ 0x4d
 80026f8:	2202      	movs	r2, #2
 80026fa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	331b      	adds	r3, #27
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 81ce 	bne.w	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	@ 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d16b      	bne.n	8002802 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3348      	adds	r3, #72	@ 0x48
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	1c59      	adds	r1, r3, #1
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4403      	add	r3, r0
 800274a:	3348      	adds	r3, #72	@ 0x48
 800274c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3348      	adds	r3, #72	@ 0x48
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d943      	bls.n	80027ec <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3348      	adds	r3, #72	@ 0x48
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	331b      	adds	r3, #27
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	3344      	adds	r3, #68	@ 0x44
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d809      	bhi.n	80027b6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	331c      	adds	r3, #28
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80027d6:	78fa      	ldrb	r2, [r7, #3]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	334c      	adds	r3, #76	@ 0x4c
 80027e6:	2204      	movs	r2, #4
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	e014      	b.n	8002816 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	1a9b      	subs	r3, r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334c      	adds	r3, #76	@ 0x4c
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e009      	b.n	8002816 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	334c      	adds	r3, #76	@ 0x4c
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3326      	adds	r3, #38	@ 0x26
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	3326      	adds	r3, #38	@ 0x26
 800283c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 8136 	bne.w	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800285a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e11b      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b03      	cmp	r3, #3
 800288c:	f040 8081 	bne.w	8002992 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334d      	adds	r3, #77	@ 0x4d
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	331b      	adds	r3, #27
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	f040 80fa 	bne.w	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	334c      	adds	r3, #76	@ 0x4c
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	0151      	lsls	r1, r2, #5
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	440a      	add	r2, r1
 80028e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ee:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	0151      	lsls	r1, r2, #5
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	440a      	add	r2, r1
 8002906:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800290a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800290e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002910:	78fb      	ldrb	r3, [r7, #3]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	0151      	lsls	r1, r2, #5
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	440a      	add	r2, r1
 8002926:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800292a:	f023 0320 	bic.w	r3, r3, #32
 800292e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3326      	adds	r3, #38	@ 0x26
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3326      	adds	r3, #38	@ 0x26
 8002956:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 80a9 	bne.w	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002974:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800297c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e08e      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	334d      	adds	r3, #77	@ 0x4d
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d143      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	2202      	movs	r2, #2
 80029ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334c      	adds	r3, #76	@ 0x4c
 80029cc:	2202      	movs	r2, #2
 80029ce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3326      	adds	r3, #38	@ 0x26
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3326      	adds	r3, #38	@ 0x26
 80029f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d159      	bne.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a12:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a1a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e03f      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334d      	adds	r3, #77	@ 0x4d
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d126      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334d      	adds	r3, #77	@ 0x4d
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3344      	adds	r3, #68	@ 0x44
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	3344      	adds	r3, #68	@ 0x44
 8002a7c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	334c      	adds	r3, #76	@ 0x4c
 8002a8e:	2204      	movs	r2, #4
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e00d      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334d      	adds	r3, #77	@ 0x4d
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	f000 8100 	beq.w	8002cac <HCD_HC_IN_IRQHandler+0xcca>
 8002aac:	e000      	b.n	8002ab0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f006 fd56 	bl	8009578 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002acc:	e0ef      	b.n	8002cae <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fc51 	bl	800637e <USB_ReadChInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b40      	cmp	r3, #64	@ 0x40
 8002ae4:	d12f      	bne.n	8002b46 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	015a      	lsls	r2, r3, #5
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af2:	461a      	mov	r2, r3
 8002af4:	2340      	movs	r3, #64	@ 0x40
 8002af6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	@ 0x4d
 8002b08:	2205      	movs	r2, #5
 8002b0a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	331a      	adds	r3, #26
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3344      	adds	r3, #68	@ 0x44
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 f9c1 	bl	8006ec6 <USB_HC_Halt>
 8002b44:	e0b3      	b.n	8002cae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fc15 	bl	800637e <USB_ReadChInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	f040 80a7 	bne.w	8002cae <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3326      	adds	r3, #38	@ 0x26
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d11b      	bne.n	8002bae <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3344      	adds	r3, #68	@ 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	334d      	adds	r3, #77	@ 0x4d
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	4611      	mov	r1, r2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f98d 	bl	8006ec6 <USB_HC_Halt>
 8002bac:	e03f      	b.n	8002c2e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3326      	adds	r3, #38	@ 0x26
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3326      	adds	r3, #38	@ 0x26
 8002bd4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d129      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3344      	adds	r3, #68	@ 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	799b      	ldrb	r3, [r3, #6]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HCD_HC_IN_IRQHandler+0xc2a>
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	331b      	adds	r3, #27
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d110      	bne.n	8002c2e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	@ 0x4d
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	4611      	mov	r1, r2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 f94c 	bl	8006ec6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	331b      	adds	r3, #27
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d129      	bne.n	8002c98 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	331b      	adds	r3, #27
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	0151      	lsls	r1, r2, #5
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	440a      	add	r2, r1
 8002c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c76:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c92:	f043 0320 	orr.w	r3, r3, #32
 8002c96:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	6093      	str	r3, [r2, #8]
 8002caa:	e000      	b.n	8002cae <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002cac:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fb53 	bl	800637e <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d11b      	bne.n	8002d1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	334d      	adds	r3, #77	@ 0x4d
 8002d04:	2207      	movs	r2, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f004 f8d8 	bl	8006ec6 <USB_HC_Halt>
 8002d16:	f000 bc6f 	b.w	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fb2b 	bl	800637e <USB_ReadChInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	f040 8082 	bne.w	8002e38 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d40:	461a      	mov	r2, r3
 8002d42:	2320      	movs	r3, #32
 8002d44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3319      	adds	r3, #25
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d124      	bne.n	8002da6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3319      	adds	r3, #25
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	334c      	adds	r3, #76	@ 0x4c
 8002d80:	2202      	movs	r2, #2
 8002d82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334d      	adds	r3, #77	@ 0x4d
 8002d94:	2203      	movs	r2, #3
 8002d96:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 f890 	bl	8006ec6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	331a      	adds	r3, #26
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	f040 841d 	bne.w	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	331b      	adds	r3, #27
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f040 8411 	bne.w	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3326      	adds	r3, #38	@ 0x26
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d009      	beq.n	8002e00 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	331b      	adds	r3, #27
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	334d      	adds	r3, #77	@ 0x4d
 8002e10:	2203      	movs	r2, #3
 8002e12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 f852 	bl	8006ec6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3344      	adds	r3, #68	@ 0x44
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e3df      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fa9c 	bl	800637e <USB_ReadChInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e50:	d111      	bne.n	8002e76 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e64:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 f829 	bl	8006ec6 <USB_HC_Halt>
 8002e74:	e3c0      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fa7d 	bl	800637e <USB_ReadChInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d168      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3344      	adds	r3, #68	@ 0x44
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 fa67 	bl	800637e <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b40      	cmp	r3, #64	@ 0x40
 8002eb8:	d112      	bne.n	8002ee0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3319      	adds	r3, #25
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eda:	461a      	mov	r2, r3
 8002edc:	2340      	movs	r3, #64	@ 0x40
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	331b      	adds	r3, #27
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	331b      	adds	r3, #27
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	0151      	lsls	r1, r2, #5
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	440a      	add	r2, r1
 8002f20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f28:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f36:	461a      	mov	r2, r3
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334d      	adds	r3, #77	@ 0x4d
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 ffb4 	bl	8006ec6 <USB_HC_Halt>
 8002f5e:	e34b      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fa08 	bl	800637e <USB_ReadChInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f74:	2b40      	cmp	r3, #64	@ 0x40
 8002f76:	d139      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2205      	movs	r2, #5
 8002f8a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	331a      	adds	r3, #26
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3319      	adds	r3, #25
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3344      	adds	r3, #68	@ 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 ff77 	bl	8006ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2340      	movs	r3, #64	@ 0x40
 8002fe8:	6093      	str	r3, [r2, #8]
 8002fea:	e305      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 f9c2 	bl	800637e <USB_ReadChInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b08      	cmp	r3, #8
 8003002:	d11a      	bne.n	800303a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	2308      	movs	r3, #8
 8003014:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	334d      	adds	r3, #77	@ 0x4d
 8003026:	2206      	movs	r2, #6
 8003028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f003 ff47 	bl	8006ec6 <USB_HC_Halt>
 8003038:	e2de      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f99b 	bl	800637e <USB_ReadChInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b10      	cmp	r3, #16
 8003050:	d144      	bne.n	80030dc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3344      	adds	r3, #68	@ 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3319      	adds	r3, #25
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d114      	bne.n	80030ba <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3318      	adds	r3, #24
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3319      	adds	r3, #25
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 feff 	bl	8006ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d4:	461a      	mov	r2, r3
 80030d6:	2310      	movs	r3, #16
 80030d8:	6093      	str	r3, [r2, #8]
 80030da:	e28d      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 f94a 	bl	800637e <USB_ReadChInterrupts>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d169      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	799b      	ldrb	r3, [r3, #6]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334d      	adds	r3, #77	@ 0x4d
 800310c:	2207      	movs	r2, #7
 800310e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fed4 	bl	8006ec6 <USB_HC_Halt>
 800311e:	e049      	b.n	80031b4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3344      	adds	r3, #68	@ 0x44
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1c59      	adds	r1, r3, #1
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4403      	add	r3, r0
 8003140:	3344      	adds	r3, #68	@ 0x44
 8003142:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3344      	adds	r3, #68	@ 0x44
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d922      	bls.n	80031a0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3344      	adds	r3, #68	@ 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334c      	adds	r3, #76	@ 0x4c
 800317e:	2204      	movs	r2, #4
 8003180:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	334c      	adds	r3, #76	@ 0x4c
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f006 f9ed 	bl	8009578 <HAL_HCD_HC_NotifyURBChange_Callback>
 800319e:	e009      	b.n	80031b4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334c      	adds	r3, #76	@ 0x4c
 80031b0:	2202      	movs	r2, #2
 80031b2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	6093      	str	r3, [r2, #8]
 80031c6:	e217      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 f8d4 	bl	800637e <USB_ReadChInterrupts>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d11b      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334d      	adds	r3, #77	@ 0x4d
 80031f2:	2209      	movs	r2, #9
 80031f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 fe61 	bl	8006ec6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003216:	6093      	str	r3, [r2, #8]
 8003218:	e1ee      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 f8ab 	bl	800637e <USB_ReadChInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	f040 81df 	bne.w	80035f2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	2302      	movs	r3, #2
 8003244:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	f040 8093 	bne.w	8003384 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334c      	adds	r3, #76	@ 0x4c
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3326      	adds	r3, #38	@ 0x26
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d00b      	beq.n	80032b4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	3326      	adds	r3, #38	@ 0x26
 80032ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	f040 8190 	bne.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	799b      	ldrb	r3, [r3, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d115      	bne.n	80032e8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	333d      	adds	r3, #61	@ 0x3d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	f083 0301 	eor.w	r3, r3, #1
 80032d4:	b2d8      	uxtb	r0, r3
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	333d      	adds	r3, #61	@ 0x3d
 80032e4:	4602      	mov	r2, r0
 80032e6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	799b      	ldrb	r3, [r3, #6]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f040 8171 	bne.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3334      	adds	r3, #52	@ 0x34
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8165 	beq.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3334      	adds	r3, #52	@ 0x34
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4403      	add	r3, r0
 800332a:	3328      	adds	r3, #40	@ 0x28
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	440b      	add	r3, r1
 8003330:	1e59      	subs	r1, r3, #1
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4403      	add	r3, r0
 8003340:	3328      	adds	r3, #40	@ 0x28
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	fbb1 f3f3 	udiv	r3, r1, r3
 8003348:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 813f 	beq.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	333d      	adds	r3, #61	@ 0x3d
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	333d      	adds	r3, #61	@ 0x3d
 800337e:	4602      	mov	r2, r0
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e127      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d120      	bne.n	80033dc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	@ 0x4d
 80033aa:	2202      	movs	r2, #2
 80033ac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	331b      	adds	r3, #27
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 8107 	bne.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334c      	adds	r3, #76	@ 0x4c
 80033d6:	2202      	movs	r2, #2
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e0fb      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	334d      	adds	r3, #77	@ 0x4d
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d13a      	bne.n	8003468 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334d      	adds	r3, #77	@ 0x4d
 8003402:	2202      	movs	r2, #2
 8003404:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334c      	adds	r3, #76	@ 0x4c
 8003416:	2202      	movs	r2, #2
 8003418:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	331b      	adds	r3, #27
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	f040 80d1 	bne.w	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	331b      	adds	r3, #27
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003464:	6053      	str	r3, [r2, #4]
 8003466:	e0b5      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	334d      	adds	r3, #77	@ 0x4d
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d114      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	334d      	adds	r3, #77	@ 0x4d
 800348e:	2202      	movs	r2, #2
 8003490:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334c      	adds	r3, #76	@ 0x4c
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e095      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334d      	adds	r3, #77	@ 0x4d
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d114      	bne.n	80034e8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334d      	adds	r3, #77	@ 0x4d
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334c      	adds	r3, #76	@ 0x4c
 80034e2:	2205      	movs	r2, #5
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e075      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b07      	cmp	r3, #7
 80034fc:	d00a      	beq.n	8003514 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334d      	adds	r3, #77	@ 0x4d
 800350e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003510:	2b09      	cmp	r3, #9
 8003512:	d170      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	@ 0x4d
 8003524:	2202      	movs	r2, #2
 8003526:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3344      	adds	r3, #68	@ 0x44
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4403      	add	r3, r0
 8003548:	3344      	adds	r3, #68	@ 0x44
 800354a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3344      	adds	r3, #68	@ 0x44
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d914      	bls.n	800358c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3344      	adds	r3, #68	@ 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	334c      	adds	r3, #76	@ 0x4c
 8003586:	2204      	movs	r2, #4
 8003588:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800358a:	e022      	b.n	80035d2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334c      	adds	r3, #76	@ 0x4c
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334c      	adds	r3, #76	@ 0x4c
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	4619      	mov	r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f005 ffc4 	bl	8009578 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f0:	e002      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80035f6:	bf00      	nop
  }
}
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b08a      	sub	sp, #40	@ 0x28
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	0c5b      	lsrs	r3, r3, #17
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003632:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d004      	beq.n	8003644 <HCD_RXQLVL_IRQHandler+0x46>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b05      	cmp	r3, #5
 800363e:	f000 80b6 	beq.w	80037ae <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003642:	e0b7      	b.n	80037b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80b3 	beq.w	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	332c      	adds	r3, #44	@ 0x2c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a7 	beq.w	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3338      	adds	r3, #56	@ 0x38
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	18d1      	adds	r1, r2, r3
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4403      	add	r3, r0
 8003688:	3334      	adds	r3, #52	@ 0x34
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4299      	cmp	r1, r3
 800368e:	f200 8083 	bhi.w	8003798 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	332c      	adds	r3, #44	@ 0x2c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	b292      	uxth	r2, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f002 fdfb 	bl	80062a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	332c      	adds	r3, #44	@ 0x2c
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	18d1      	adds	r1, r2, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4403      	add	r3, r0
 80036d6:	332c      	adds	r3, #44	@ 0x2c
 80036d8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3338      	adds	r3, #56	@ 0x38
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	18d1      	adds	r1, r2, r3
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4403      	add	r3, r0
 80036fe:	3338      	adds	r3, #56	@ 0x38
 8003700:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	0cdb      	lsrs	r3, r3, #19
 8003712:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003716:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3328      	adds	r3, #40	@ 0x28
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4293      	cmp	r3, r2
 8003730:	d13f      	bne.n	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03c      	beq.n	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003756:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	333c      	adds	r3, #60	@ 0x3c
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2d8      	uxtb	r0, r3
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	333c      	adds	r3, #60	@ 0x3c
 8003792:	4602      	mov	r2, r0
 8003794:	701a      	strb	r2, [r3, #0]
      break;
 8003796:	e00c      	b.n	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334c      	adds	r3, #76	@ 0x4c
 80037a8:	2204      	movs	r2, #4
 80037aa:	701a      	strb	r2, [r3, #0]
      break;
 80037ac:	e001      	b.n	80037b2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80037b2:	bf00      	nop
  }
}
 80037b4:	bf00      	nop
 80037b6:	3728      	adds	r7, #40	@ 0x28
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80037e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d10b      	bne.n	800380c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f005 fe9e 	bl	8009540 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d132      	bne.n	800387c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b04      	cmp	r3, #4
 8003826:	d126      	bne.n	8003876 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7a5b      	ldrb	r3, [r3, #9]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d113      	bne.n	8003858 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800383a:	d106      	bne.n	800384a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f002 fec0 	bl	80065c8 <USB_InitFSLSPClkSel>
 8003848:	e011      	b.n	800386e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f002 feb9 	bl	80065c8 <USB_InitFSLSPClkSel>
 8003856:	e00a      	b.n	800386e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	79db      	ldrb	r3, [r3, #7]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003866:	461a      	mov	r2, r3
 8003868:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800386c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f005 fe90 	bl	8009594 <HAL_HCD_PortEnabled_Callback>
 8003874:	e002      	b.n	800387c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f005 fe9a 	bl	80095b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d103      	bne.n	800388e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f043 0320 	orr.w	r3, r3, #32
 800388c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6013      	str	r3, [r2, #0]
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e12b      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd f8b0 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	@ 0x24
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003908:	f001 fa20 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4a81      	ldr	r2, [pc, #516]	@ (8003b18 <HAL_I2C_Init+0x274>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d807      	bhi.n	8003928 <HAL_I2C_Init+0x84>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a80      	ldr	r2, [pc, #512]	@ (8003b1c <HAL_I2C_Init+0x278>)
 800391c:	4293      	cmp	r3, r2
 800391e:	bf94      	ite	ls
 8003920:	2301      	movls	r3, #1
 8003922:	2300      	movhi	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e006      	b.n	8003936 <HAL_I2C_Init+0x92>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b20 <HAL_I2C_Init+0x27c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0e7      	b.n	8003b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a78      	ldr	r2, [pc, #480]	@ (8003b24 <HAL_I2C_Init+0x280>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b18 <HAL_I2C_Init+0x274>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d802      	bhi.n	8003978 <HAL_I2C_Init+0xd4>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3301      	adds	r3, #1
 8003976:	e009      	b.n	800398c <HAL_I2C_Init+0xe8>
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	4a69      	ldr	r2, [pc, #420]	@ (8003b28 <HAL_I2C_Init+0x284>)
 8003984:	fba2 2303 	umull	r2, r3, r2, r3
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	3301      	adds	r3, #1
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800399e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	495c      	ldr	r1, [pc, #368]	@ (8003b18 <HAL_I2C_Init+0x274>)
 80039a8:	428b      	cmp	r3, r1
 80039aa:	d819      	bhi.n	80039e0 <HAL_I2C_Init+0x13c>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	1e59      	subs	r1, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039c0:	400b      	ands	r3, r1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_I2C_Init+0x138>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e59      	subs	r1, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	e051      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039dc:	2304      	movs	r3, #4
 80039de:	e04f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <HAL_I2C_Init+0x168>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e012      	b.n	8003a32 <HAL_I2C_Init+0x18e>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2301      	moveq	r3, #1
 8003a2e:	2300      	movne	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Init+0x196>
 8003a36:	2301      	movs	r3, #1
 8003a38:	e022      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10e      	bne.n	8003a60 <HAL_I2C_Init+0x1bc>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1e58      	subs	r0, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	440b      	add	r3, r1
 8003a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a54:	3301      	adds	r3, #1
 8003a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a5e:	e00f      	b.n	8003a80 <HAL_I2C_Init+0x1dc>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1e58      	subs	r0, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	0099      	lsls	r1, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6809      	ldr	r1, [r1, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6911      	ldr	r1, [r2, #16]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68d2      	ldr	r2, [r2, #12]
 8003aba:	4311      	orrs	r1, r2
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	000186a0 	.word	0x000186a0
 8003b1c:	001e847f 	.word	0x001e847f
 8003b20:	003d08ff 	.word	0x003d08ff
 8003b24:	431bde83 	.word	0x431bde83
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e128      	b.n	8003d90 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a90      	ldr	r2, [pc, #576]	@ (8003d98 <HAL_I2S_Init+0x26c>)
 8003b56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fc ffb1 	bl	8000ac0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b74:	f023 030f 	bic.w	r3, r3, #15
 8003b78:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d060      	beq.n	8003c4c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b92:	2310      	movs	r3, #16
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e001      	b.n	8003b9c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b98:	2320      	movs	r3, #32
 8003b9a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d802      	bhi.n	8003baa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003baa:	2001      	movs	r0, #1
 8003bac:	f001 f9d8 	bl	8004f60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bb0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bba:	d125      	bne.n	8003c08 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be0:	3305      	adds	r3, #5
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	e01f      	b.n	8003c26 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	3305      	adds	r3, #5
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e00e      	b.n	8003c26 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	3305      	adds	r3, #5
 8003c24:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4a5c      	ldr	r2, [pc, #368]	@ (8003d9c <HAL_I2S_Init+0x270>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	08db      	lsrs	r3, r3, #3
 8003c30:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	e003      	b.n	8003c54 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d902      	bls.n	8003c60 <HAL_I2S_Init+0x134>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2bff      	cmp	r3, #255	@ 0xff
 8003c5e:	d907      	bls.n	8003c70 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0210 	orr.w	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e08f      	b.n	8003d90 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	ea42 0103 	orr.w	r1, r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69fa      	ldr	r2, [r7, #28]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c8e:	f023 030f 	bic.w	r3, r3, #15
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6851      	ldr	r1, [r2, #4]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68d2      	ldr	r2, [r2, #12]
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6992      	ldr	r2, [r2, #24]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d161      	bne.n	8003d80 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a38      	ldr	r2, [pc, #224]	@ (8003da0 <HAL_I2S_Init+0x274>)
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a37      	ldr	r2, [pc, #220]	@ (8003da4 <HAL_I2S_Init+0x278>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2S_Init+0x1a4>
 8003ccc:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_I2S_Init+0x27c>)
 8003cce:	e001      	b.n	8003cd4 <HAL_I2S_Init+0x1a8>
 8003cd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	4932      	ldr	r1, [pc, #200]	@ (8003da4 <HAL_I2S_Init+0x278>)
 8003cdc:	428a      	cmp	r2, r1
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2S_Init+0x1b8>
 8003ce0:	4a31      	ldr	r2, [pc, #196]	@ (8003da8 <HAL_I2S_Init+0x27c>)
 8003ce2:	e001      	b.n	8003ce8 <HAL_I2S_Init+0x1bc>
 8003ce4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ce8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cec:	f023 030f 	bic.w	r3, r3, #15
 8003cf0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8003da4 <HAL_I2S_Init+0x278>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2S_Init+0x1d4>
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003da8 <HAL_I2S_Init+0x27c>)
 8003cfe:	e001      	b.n	8003d04 <HAL_I2S_Init+0x1d8>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d04:	2202      	movs	r2, #2
 8003d06:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a25      	ldr	r2, [pc, #148]	@ (8003da4 <HAL_I2S_Init+0x278>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_I2S_Init+0x1ea>
 8003d12:	4b25      	ldr	r3, [pc, #148]	@ (8003da8 <HAL_I2S_Init+0x27c>)
 8003d14:	e001      	b.n	8003d1a <HAL_I2S_Init+0x1ee>
 8003d16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d26:	d003      	beq.n	8003d30 <HAL_I2S_Init+0x204>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	e001      	b.n	8003d3c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d46:	4313      	orrs	r3, r2
 8003d48:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d50:	4313      	orrs	r3, r2
 8003d52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	897b      	ldrh	r3, [r7, #10]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d68:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003da4 <HAL_I2S_Init+0x278>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <HAL_I2S_Init+0x24c>
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <HAL_I2S_Init+0x27c>)
 8003d76:	e001      	b.n	8003d7c <HAL_I2S_Init+0x250>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d7c:	897a      	ldrh	r2, [r7, #10]
 8003d7e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08003ea3 	.word	0x08003ea3
 8003d9c:	cccccccd 	.word	0xcccccccd
 8003da0:	08003fb9 	.word	0x08003fb9
 8003da4:	40003800 	.word	0x40003800
 8003da8:	40003400 	.word	0x40003400

08003dac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10e      	bne.n	8003e3c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e2c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ffb8 	bl	8003dac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	b292      	uxth	r2, r2
 8003e58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10e      	bne.n	8003e9a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff93 	bl	8003dc0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d13a      	bne.n	8003f34 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d109      	bne.n	8003edc <I2S_IRQHandler+0x3a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d102      	bne.n	8003edc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ffb4 	bl	8003e44 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d126      	bne.n	8003f34 <I2S_IRQHandler+0x92>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d11f      	bne.n	8003f34 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff50 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d136      	bne.n	8003fae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d109      	bne.n	8003f5e <I2S_IRQHandler+0xbc>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d102      	bne.n	8003f5e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff ff45 	bl	8003de8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d122      	bne.n	8003fae <I2S_IRQHandler+0x10c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d11b      	bne.n	8003fae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f84:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa0:	f043 0204 	orr.w	r2, r3, #4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff13 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a92      	ldr	r2, [pc, #584]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003fd2:	4b92      	ldr	r3, [pc, #584]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd4:	e001      	b.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003fd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8b      	ldr	r2, [pc, #556]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ff0:	4b8a      	ldr	r3, [pc, #552]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ff4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004004:	d004      	beq.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8099 	bne.w	8004142 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b02      	cmp	r3, #2
 8004018:	d107      	bne.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f925 	bl	8004274 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9c8 	bl	80043d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d13a      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d035      	beq.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d101      	bne.n	8004066 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004062:	4b6e      	ldr	r3, [pc, #440]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004064:	e001      	b.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4969      	ldr	r1, [pc, #420]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004072:	428b      	cmp	r3, r1
 8004074:	d101      	bne.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004076:	4b69      	ldr	r3, [pc, #420]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004078:	e001      	b.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800407a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800407e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004082:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004092:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fe88 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	f040 80c3 	bne.w	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80bd 	beq.w	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a49      	ldr	r2, [pc, #292]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80040f6:	4b49      	ldr	r3, [pc, #292]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040f8:	e001      	b.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80040fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4944      	ldr	r1, [pc, #272]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004106:	428b      	cmp	r3, r1
 8004108:	d101      	bne.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800410a:	4b44      	ldr	r3, [pc, #272]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800410c:	e001      	b.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004112:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004116:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f043 0204 	orr.w	r2, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fe4a 	bl	8003dd4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004140:	e089      	b.n	8004256 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d107      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8be 	bl	80042d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8fd 	bl	8004370 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b40      	cmp	r3, #64	@ 0x40
 800417e:	d12f      	bne.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d02a      	beq.n	80041e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004198:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041a4:	4b1d      	ldr	r3, [pc, #116]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a6:	e001      	b.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80041a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4919      	ldr	r1, [pc, #100]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041b4:	428b      	cmp	r3, r1
 80041b6:	d101      	bne.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ba:	e001      	b.n	80041c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f043 0202 	orr.w	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fdfa 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d136      	bne.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d031      	beq.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a07      	ldr	r2, [pc, #28]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80041fe:	4b07      	ldr	r3, [pc, #28]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004200:	e001      	b.n	8004206 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4902      	ldr	r1, [pc, #8]	@ (8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800420e:	428b      	cmp	r3, r1
 8004210:	d106      	bne.n	8004220 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004212:	4b02      	ldr	r3, [pc, #8]	@ (800421c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004214:	e006      	b.n	8004224 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004216:	bf00      	nop
 8004218:	40003800 	.word	0x40003800
 800421c:	40003400 	.word	0x40003400
 8004220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004224:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004228:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004238:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fdc0 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004254:	e000      	b.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004256:	bf00      	nop
}
 8004258:	bf00      	nop
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c99      	adds	r1, r3, #2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6251      	str	r1, [r2, #36]	@ 0x24
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d113      	bne.n	80042ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff ffc9 	bl	8004260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	1c99      	adds	r1, r3, #2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80042ea:	8819      	ldrh	r1, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004368 <I2SEx_TxISR_I2SExt+0x90>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <I2SEx_TxISR_I2SExt+0x22>
 80042f6:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <I2SEx_TxISR_I2SExt+0x94>)
 80042f8:	e001      	b.n	80042fe <I2SEx_TxISR_I2SExt+0x26>
 80042fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042fe:	460a      	mov	r2, r1
 8004300:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d121      	bne.n	800435e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <I2SEx_TxISR_I2SExt+0x90>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <I2SEx_TxISR_I2SExt+0x50>
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <I2SEx_TxISR_I2SExt+0x94>)
 8004326:	e001      	b.n	800432c <I2SEx_TxISR_I2SExt+0x54>
 8004328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	490d      	ldr	r1, [pc, #52]	@ (8004368 <I2SEx_TxISR_I2SExt+0x90>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d101      	bne.n	800433c <I2SEx_TxISR_I2SExt+0x64>
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <I2SEx_TxISR_I2SExt+0x94>)
 800433a:	e001      	b.n	8004340 <I2SEx_TxISR_I2SExt+0x68>
 800433c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004340:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004344:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff81 	bl	8004260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40003800 	.word	0x40003800
 800436c:	40003400 	.word	0x40003400

08004370 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68d8      	ldr	r0, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	1c99      	adds	r1, r3, #2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004388:	b282      	uxth	r2, r0
 800438a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff4a 	bl	8004260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <I2SEx_RxISR_I2SExt+0x90>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <I2SEx_RxISR_I2SExt+0x16>
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <I2SEx_RxISR_I2SExt+0x94>)
 80043e8:	e001      	b.n	80043ee <I2SEx_RxISR_I2SExt+0x1a>
 80043ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043ee:	68d8      	ldr	r0, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	1c99      	adds	r1, r3, #2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043fa:	b282      	uxth	r2, r0
 80043fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d121      	bne.n	800445a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <I2SEx_RxISR_I2SExt+0x90>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <I2SEx_RxISR_I2SExt+0x50>
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <I2SEx_RxISR_I2SExt+0x94>)
 8004422:	e001      	b.n	8004428 <I2SEx_RxISR_I2SExt+0x54>
 8004424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	490d      	ldr	r1, [pc, #52]	@ (8004464 <I2SEx_RxISR_I2SExt+0x90>)
 8004430:	428b      	cmp	r3, r1
 8004432:	d101      	bne.n	8004438 <I2SEx_RxISR_I2SExt+0x64>
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <I2SEx_RxISR_I2SExt+0x94>)
 8004436:	e001      	b.n	800443c <I2SEx_RxISR_I2SExt+0x68>
 8004438:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800443c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004440:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff03 	bl	8004260 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40003800 	.word	0x40003800
 8004468:	40003400 	.word	0x40003400

0800446c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e267      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d075      	beq.n	8004576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448a:	4b88      	ldr	r3, [pc, #544]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b85      	ldr	r3, [pc, #532]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d112      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b82      	ldr	r3, [pc, #520]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05b      	beq.n	8004574 <HAL_RCC_OscConfig+0x108>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d157      	bne.n	8004574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e242      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b76      	ldr	r3, [pc, #472]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b70      	ldr	r3, [pc, #448]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6f      	ldr	r2, [pc, #444]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6d      	ldr	r3, [pc, #436]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6c      	ldr	r2, [pc, #432]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 8004504:	4b69      	ldr	r3, [pc, #420]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b66      	ldr	r3, [pc, #408]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a65      	ldr	r2, [pc, #404]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fc fd00 	bl	8000f28 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fc fcfc 	bl	8000f28 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e207      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5b      	ldr	r3, [pc, #364]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xc0>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fc fcec 	bl	8000f28 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004554:	f7fc fce8 	bl	8000f28 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1f3      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b51      	ldr	r3, [pc, #324]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0xe8>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004582:	4b4a      	ldr	r3, [pc, #296]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458e:	4b47      	ldr	r3, [pc, #284]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459a:	4b44      	ldr	r3, [pc, #272]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b41      	ldr	r3, [pc, #260]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c7      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3b      	ldr	r3, [pc, #236]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4937      	ldr	r1, [pc, #220]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b34      	ldr	r3, [pc, #208]	@ (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fc fca1 	bl	8000f28 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fc fc9d 	bl	8000f28 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a8      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2b      	ldr	r3, [pc, #172]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b28      	ldr	r3, [pc, #160]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4925      	ldr	r1, [pc, #148]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b24      	ldr	r3, [pc, #144]	@ (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fc fc80 	bl	8000f28 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462c:	f7fc fc7c 	bl	8000f28 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e187      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d036      	beq.n	80046c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_RCC_OscConfig+0x248>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fc fc60 	bl	8000f28 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fc fc5c 	bl	8000f28 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e167      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <HAL_RCC_OscConfig+0x240>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x200>
 800468a:	e01b      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_OscConfig+0x248>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fc fc49 	bl	8000f28 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	e00e      	b.n	80046b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fc fc45 	bl	8000f28 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d907      	bls.n	80046b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e150      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
 80046b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ea      	bne.n	800469a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8097 	beq.w	8004800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b81      	ldr	r3, [pc, #516]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	4b7d      	ldr	r3, [pc, #500]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ea:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f2:	4b7a      	ldr	r3, [pc, #488]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4b74      	ldr	r3, [pc, #464]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fc fc05 	bl	8000f28 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fc fc01 	bl	8000f28 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e10c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b6a      	ldr	r3, [pc, #424]	@ (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ea>
 8004748:	4b64      	ldr	r3, [pc, #400]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	4a63      	ldr	r2, [pc, #396]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	@ 0x70
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x30c>
 800475e:	4b5f      	ldr	r3, [pc, #380]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004762:	4a5e      	ldr	r2, [pc, #376]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	@ 0x70
 800476a:	4b5c      	ldr	r3, [pc, #368]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476e:	4a5b      	ldr	r2, [pc, #364]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6713      	str	r3, [r2, #112]	@ 0x70
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004778:	4b58      	ldr	r3, [pc, #352]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	4a57      	ldr	r2, [pc, #348]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	@ 0x70
 8004784:	4b55      	ldr	r3, [pc, #340]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004788:	4a54      	ldr	r2, [pc, #336]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fc fbc6 	bl	8000f28 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fc fbc2 	bl	8000f28 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0cb      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	4b49      	ldr	r3, [pc, #292]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <HAL_RCC_OscConfig+0x334>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fc fbb0 	bl	8000f28 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fc fbac 	bl	8000f28 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0b5      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e2:	4b3e      	ldr	r3, [pc, #248]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f8:	4a38      	ldr	r2, [pc, #224]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a1 	beq.w	800494c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480a:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d05c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d141      	bne.n	80048a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b31      	ldr	r3, [pc, #196]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fc fb80 	bl	8000f28 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fb7c 	bl	8000f28 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e087      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	491b      	ldr	r1, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fc fb55 	bl	8000f28 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fc fb51 	bl	8000f28 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e05c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x416>
 80048a0:	e054      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <HAL_RCC_OscConfig+0x478>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fc fb3e 	bl	8000f28 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fc fb3a 	bl	8000f28 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e045      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_OscConfig+0x470>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
 80048ce:	e03d      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e038      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x4ec>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d028      	beq.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d121      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11a      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800491e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cc      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b68      	ldr	r3, [pc, #416]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90c      	bls.n	8004998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b65      	ldr	r3, [pc, #404]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d044      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4934      	ldr	r1, [pc, #208]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fc fa6c 	bl	8000f28 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fc fa68 	bl	8000f28 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e04f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20c      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	@ (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f821 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	@ (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc f9cc 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	08009c70 	.word	0x08009c70
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b094      	sub	sp, #80	@ 0x50
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b34:	2300      	movs	r3, #0
 8004b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b40:	4b79      	ldr	r3, [pc, #484]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	f200 80e1 	bhi.w	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5a:	e0db      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b73      	ldr	r3, [pc, #460]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004b60:	e0db      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b73      	ldr	r3, [pc, #460]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b66:	e0d8      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b6f      	ldr	r3, [pc, #444]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f04f 0000 	mov.w	r0, #0
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bac:	0150      	lsls	r0, r2, #5
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	1a51      	subs	r1, r2, r1
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	4629      	mov	r1, r5
 8004bba:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	018b      	lsls	r3, r1, #6
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	018a      	lsls	r2, r1, #6
 8004bda:	4651      	mov	r1, sl
 8004bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8004be0:	4659      	mov	r1, fp
 8004be2:	eb63 0901 	sbc.w	r9, r3, r1
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	eb18 0303 	adds.w	r3, r8, r3
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	462b      	mov	r3, r5
 8004c08:	eb49 0303 	adc.w	r3, r9, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	024b      	lsls	r3, r1, #9
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c24:	4621      	mov	r1, r4
 8004c26:	024a      	lsls	r2, r1, #9
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c38:	f7fb fac6 	bl	80001c8 <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c44:	e058      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b38      	ldr	r3, [pc, #224]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	4611      	mov	r1, r2
 8004c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c72:	0150      	lsls	r0, r2, #5
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c98:	ebb2 040a 	subs.w	r4, r2, sl
 8004c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	028b      	lsls	r3, r1, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd8:	4621      	mov	r1, r4
 8004cda:	028a      	lsls	r2, r1, #10
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	f7fb fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3750      	adds	r7, #80	@ 0x50
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b03      	ldr	r3, [pc, #12]	@ (8004d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000000 	.word	0x20000000

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d50:	f7ff fff0 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4903      	ldr	r1, [pc, #12]	@ (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	08009c80 	.word	0x08009c80

08004d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d78:	f7ff ffdc 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	@ (8004d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0b5b      	lsrs	r3, r3, #13
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	@ (8004d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	08009c80 	.word	0x08009c80

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d035      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004dc4:	4b62      	ldr	r3, [pc, #392]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dca:	f7fc f8ad 	bl	8000f28 <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dd2:	f7fc f8a9 	bl	8000f28 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e0b0      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f0      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	019a      	lsls	r2, r3, #6
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	071b      	lsls	r3, r3, #28
 8004dfc:	4955      	ldr	r1, [pc, #340]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e04:	4b52      	ldr	r3, [pc, #328]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0a:	f7fc f88d 	bl	8000f28 <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e12:	f7fc f889 	bl	8000f28 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e090      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e24:	4b4b      	ldr	r3, [pc, #300]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 8083 	beq.w	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	4b44      	ldr	r3, [pc, #272]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	4a43      	ldr	r2, [pc, #268]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e4e:	4b41      	ldr	r3, [pc, #260]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e66:	f7fc f85f 	bl	8000f28 <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e6e:	f7fc f85b 	bl	8000f28 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e062      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e80:	4b35      	ldr	r3, [pc, #212]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8c:	4b31      	ldr	r3, [pc, #196]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02f      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d028      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb4:	4b29      	ldr	r3, [pc, #164]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eba:	4b28      	ldr	r3, [pc, #160]	@ (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ec0:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ec6:	4b23      	ldr	r3, [pc, #140]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d114      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fc f829 	bl	8000f28 <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fc f825 	bl	8000f28 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e02a      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	4b18      	ldr	r3, [pc, #96]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ee      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f0a:	4b12      	ldr	r3, [pc, #72]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1e:	490d      	ldr	r1, [pc, #52]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	608b      	str	r3, [r1, #8]
 8004f24:	e005      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f26:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3e:	4905      	ldr	r1, [pc, #20]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	42470068 	.word	0x42470068
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
 8004f5c:	42470e40 	.word	0x42470e40

08004f60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d13f      	bne.n	8004ffe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f7e:	4b24      	ldr	r3, [pc, #144]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f94:	d12f      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f96:	4b1f      	ldr	r3, [pc, #124]	@ (8005014 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f98:	617b      	str	r3, [r7, #20]
          break;
 8004f9a:	e02f      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004faa:	4b19      	ldr	r3, [pc, #100]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fb2:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e007      	b.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fbc:	4b14      	ldr	r3, [pc, #80]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc4:	4a15      	ldr	r2, [pc, #84]	@ (800501c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fcc:	4b10      	ldr	r3, [pc, #64]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe6:	0f1b      	lsrs	r3, r3, #28
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	617b      	str	r3, [r7, #20]
          break;
 8004ff4:	e002      	b.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
          break;
 8004ffa:	bf00      	nop
        }
      }
      break;
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004ffe:	bf00      	nop
    }
  }
  return frequency;
 8005000:	697b      	ldr	r3, [r7, #20]
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40023800 	.word	0x40023800
 8005014:	00bb8000 	.word	0x00bb8000
 8005018:	007a1200 	.word	0x007a1200
 800501c:	00f42400 	.word	0x00f42400

08005020 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e07b      	b.n	800512a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d108      	bne.n	800504c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005042:	d009      	beq.n	8005058 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	61da      	str	r2, [r3, #28]
 800504a:	e005      	b.n	8005058 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fb fda4 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800508e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050dc:	ea42 0103 	orr.w	r1, r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0104 	and.w	r1, r3, #4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f003 0210 	and.w	r2, r3, #16
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005118:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e042      	b.n	80051ca <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fb fd79 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2224      	movs	r2, #36	@ 0x24
 8005162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005174:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fcb2 	bl	8005ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800518a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695a      	ldr	r2, [r3, #20]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800519a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	4613      	mov	r3, r2
 80051de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d121      	bne.n	8005230 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_UART_Transmit_IT+0x26>
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e01a      	b.n	8005232 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	88fa      	ldrh	r2, [r7, #6]
 8005206:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	88fa      	ldrh	r2, [r7, #6]
 800520c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2221      	movs	r2, #33	@ 0x21
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800522a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	e000      	b.n	8005232 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005230:	2302      	movs	r3, #2
  }
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
	...

08005240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b0ba      	sub	sp, #232	@ 0xe8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005266:	2300      	movs	r3, #0
 8005268:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800527e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb5f 	bl	8005962 <UART_Receive_IT>
      return;
 80052a4:	e25b      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 80de 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80d1 	beq.w	800546c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f2:	f003 0304 	and.w	r3, r3, #4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
 80052fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530a:	f043 0202 	orr.w	r2, r3, #2
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
 800531e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d011      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
 8005342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0208 	orr.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 81f2 	beq.w	8005754 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d008      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 faea 	bl	8005962 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_UART_IRQHandler+0x17a>
 80053b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04f      	beq.n	800545a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9f2 	bl	80057a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b40      	cmp	r3, #64	@ 0x40
 80053cc:	d141      	bne.n	8005452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1d9      	bne.n	80053ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005426:	4a7e      	ldr	r2, [pc, #504]	@ (8005620 <HAL_UART_IRQHandler+0x3e0>)
 8005428:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb ff2b 	bl	800128a <HAL_DMA_Abort_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005444:	4610      	mov	r0, r2
 8005446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	e00e      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f994 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005450:	e00a      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f990 	bl	8005778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005458:	e006      	b.n	8005468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f98c 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005466:	e175      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	bf00      	nop
    return;
 800546a:	e173      	b.n	8005754 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 814f 	bne.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8148 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8141 	beq.w	8005714 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	f040 80b6 	bne.w	8005624 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 8145 	beq.w	8005758 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054d6:	429a      	cmp	r2, r3
 80054d8:	f080 813e 	bcs.w	8005758 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ee:	f000 8088 	beq.w	8005602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	330c      	adds	r3, #12
 80054f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005500:	e853 3f00 	ldrex	r3, [r3]
 8005504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800550c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800551e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005522:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800552a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1d9      	bne.n	80054f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3314      	adds	r3, #20
 8005544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800554e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005550:	f023 0301 	bic.w	r3, r3, #1
 8005554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800556a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e1      	bne.n	800553e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800558a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800558c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800559e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fb fdd4 	bl	80011aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005610:	b29b      	uxth	r3, r3
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	b29b      	uxth	r3, r3
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8b7 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800561e:	e09b      	b.n	8005758 <HAL_UART_IRQHandler+0x518>
 8005620:	0800586b 	.word	0x0800586b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 808e 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8089 	beq.w	800575c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800566e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005674:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e3      	bne.n	800564a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3314      	adds	r3, #20
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	623b      	str	r3, [r7, #32]
   return(result);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e3      	bne.n	8005682 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	e853 3f00 	ldrex	r3, [r3]
 80056d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	69b9      	ldr	r1, [r7, #24]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	617b      	str	r3, [r7, #20]
   return(result);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e3      	bne.n	80056c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f83d 	bl	800578c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005712:	e023      	b.n	800575c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
 8005720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8b0 	bl	8005892 <UART_Transmit_IT>
    return;
 8005732:	e014      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
 8005740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f8f0 	bl	8005932 <UART_EndTransmit_IT>
    return;
 8005752:	e004      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
    return;
 8005754:	bf00      	nop
 8005756:	e002      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_UART_IRQHandler+0x51e>
      return;
 800575c:	bf00      	nop
  }
}
 800575e:	37e8      	adds	r7, #232	@ 0xe8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b095      	sub	sp, #84	@ 0x54
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80057ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f023 0301 	bic.w	r3, r3, #1
 80057f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e5      	bne.n	80057e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	d119      	bne.n	8005850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	60bb      	str	r3, [r7, #8]
   return(result);
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	647b      	str	r3, [r7, #68]	@ 0x44
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800583c:	61ba      	str	r2, [r7, #24]
 800583e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6979      	ldr	r1, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800585e:	bf00      	nop
 8005860:	3754      	adds	r7, #84	@ 0x54
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ff77 	bl	8005778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b21      	cmp	r3, #33	@ 0x21
 80058a4:	d13e      	bne.n	8005924 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ae:	d114      	bne.n	80058da <UART_Transmit_IT+0x48>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d110      	bne.n	80058da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]
 80058d8:	e008      	b.n	80058ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	1c59      	adds	r1, r3, #1
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6211      	str	r1, [r2, #32]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4619      	mov	r1, r3
 80058fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10f      	bne.n	8005920 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800590e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800591e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005948:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb f82a 	bl	80009ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b08c      	sub	sp, #48	@ 0x30
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b22      	cmp	r3, #34	@ 0x22
 8005974:	f040 80ae 	bne.w	8005ad4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005980:	d117      	bne.n	80059b2 <UART_Receive_IT+0x50>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80059b0:	e026      	b.n	8005a00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c4:	d007      	beq.n	80059d6 <UART_Receive_IT+0x74>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <UART_Receive_IT+0x82>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e008      	b.n	80059f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d15d      	bne.n	8005ad0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0220 	bic.w	r2, r2, #32
 8005a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695a      	ldr	r2, [r3, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d135      	bne.n	8005ac6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f023 0310 	bic.w	r3, r3, #16
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	623a      	str	r2, [r7, #32]
 8005a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69f9      	ldr	r1, [r7, #28]
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d10a      	bne.n	8005ab8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fe64 	bl	800578c <HAL_UARTEx_RxEventCallback>
 8005ac4:	e002      	b.n	8005acc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fe4c 	bl	8005764 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e002      	b.n	8005ad6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3730      	adds	r7, #48	@ 0x30
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ae4:	b0c0      	sub	sp, #256	@ 0x100
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	ea40 0301 	orr.w	r3, r0, r1
 8005b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b38:	f021 010c 	bic.w	r1, r1, #12
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b46:	430b      	orrs	r3, r1
 8005b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	6999      	ldr	r1, [r3, #24]
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	ea40 0301 	orr.w	r3, r0, r1
 8005b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8005dac <UART_SetConfig+0x2cc>)
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d005      	beq.n	8005b80 <UART_SetConfig+0xa0>
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005db0 <UART_SetConfig+0x2d0>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d104      	bne.n	8005b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b80:	f7ff f8f8 	bl	8004d74 <HAL_RCC_GetPCLK2Freq>
 8005b84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b88:	e003      	b.n	8005b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b8a:	f7ff f8df 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b9c:	f040 810c 	bne.w	8005db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005baa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	1891      	adds	r1, r2, r2
 8005bb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bba:	415b      	adcs	r3, r3
 8005bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	eb12 0801 	adds.w	r8, r2, r1
 8005bc8:	4629      	mov	r1, r5
 8005bca:	eb43 0901 	adc.w	r9, r3, r1
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be2:	4690      	mov	r8, r2
 8005be4:	4699      	mov	r9, r3
 8005be6:	4623      	mov	r3, r4
 8005be8:	eb18 0303 	adds.w	r3, r8, r3
 8005bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bf0:	462b      	mov	r3, r5
 8005bf2:	eb49 0303 	adc.w	r3, r9, r3
 8005bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c0e:	460b      	mov	r3, r1
 8005c10:	18db      	adds	r3, r3, r3
 8005c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c14:	4613      	mov	r3, r2
 8005c16:	eb42 0303 	adc.w	r3, r2, r3
 8005c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c24:	f7fa fad0 	bl	80001c8 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b61      	ldr	r3, [pc, #388]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c50:	415b      	adcs	r3, r3
 8005c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c58:	4641      	mov	r1, r8
 8005c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c5e:	4649      	mov	r1, r9
 8005c60:	eb43 0b01 	adc.w	fp, r3, r1
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c78:	4692      	mov	sl, r2
 8005c7a:	469b      	mov	fp, r3
 8005c7c:	4643      	mov	r3, r8
 8005c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c86:	464b      	mov	r3, r9
 8005c88:	eb4b 0303 	adc.w	r3, fp, r3
 8005c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	18db      	adds	r3, r3, r3
 8005ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005caa:	4613      	mov	r3, r2
 8005cac:	eb42 0303 	adc.w	r3, r2, r3
 8005cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cba:	f7fa fa85 	bl	80001c8 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	2264      	movs	r2, #100	@ 0x64
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	1acb      	subs	r3, r1, r3
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cda:	4b36      	ldr	r3, [pc, #216]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ce8:	441c      	add	r4, r3
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d04:	415b      	adcs	r3, r3
 8005d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d60:	460b      	mov	r3, r1
 8005d62:	18db      	adds	r3, r3, r3
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d66:	4613      	mov	r3, r2
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d76:	f7fa fa27 	bl	80001c8 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005d80:	fba3 1302 	umull	r1, r3, r3, r2
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	2164      	movs	r1, #100	@ 0x64
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	3332      	adds	r3, #50	@ 0x32
 8005d92:	4a08      	ldr	r2, [pc, #32]	@ (8005db4 <UART_SetConfig+0x2d4>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f003 0207 	and.w	r2, r3, #7
 8005d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4422      	add	r2, r4
 8005da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005da8:	e106      	b.n	8005fb8 <UART_SetConfig+0x4d8>
 8005daa:	bf00      	nop
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40011400 	.word	0x40011400
 8005db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dca:	4642      	mov	r2, r8
 8005dcc:	464b      	mov	r3, r9
 8005dce:	1891      	adds	r1, r2, r2
 8005dd0:	6239      	str	r1, [r7, #32]
 8005dd2:	415b      	adcs	r3, r3
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dda:	4641      	mov	r1, r8
 8005ddc:	1854      	adds	r4, r2, r1
 8005dde:	4649      	mov	r1, r9
 8005de0:	eb43 0501 	adc.w	r5, r3, r1
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	00eb      	lsls	r3, r5, #3
 8005dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df2:	00e2      	lsls	r2, r4, #3
 8005df4:	4614      	mov	r4, r2
 8005df6:	461d      	mov	r5, r3
 8005df8:	4643      	mov	r3, r8
 8005dfa:	18e3      	adds	r3, r4, r3
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e00:	464b      	mov	r3, r9
 8005e02:	eb45 0303 	adc.w	r3, r5, r3
 8005e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e1a:	f04f 0200 	mov.w	r2, #0
 8005e1e:	f04f 0300 	mov.w	r3, #0
 8005e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e26:	4629      	mov	r1, r5
 8005e28:	008b      	lsls	r3, r1, #2
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e30:	4621      	mov	r1, r4
 8005e32:	008a      	lsls	r2, r1, #2
 8005e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e38:	f7fa f9c6 	bl	80001c8 <__aeabi_uldivmod>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4b60      	ldr	r3, [pc, #384]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005e42:	fba3 2302 	umull	r2, r3, r3, r2
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	011c      	lsls	r4, r3, #4
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	61b9      	str	r1, [r7, #24]
 8005e64:	415b      	adcs	r3, r3
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6139      	str	r1, [r7, #16]
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	008b      	lsls	r3, r1, #2
 8005ec8:	4641      	mov	r1, r8
 8005eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ece:	4641      	mov	r1, r8
 8005ed0:	008a      	lsls	r2, r1, #2
 8005ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005ed6:	f7fa f977 	bl	80001c8 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	2264      	movs	r2, #100	@ 0x64
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	1acb      	subs	r3, r1, r3
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	3332      	adds	r3, #50	@ 0x32
 8005ef4:	4a33      	ldr	r2, [pc, #204]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f00:	441c      	add	r4, r3
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	415b      	adcs	r3, r3
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f20:	4641      	mov	r1, r8
 8005f22:	1851      	adds	r1, r2, r1
 8005f24:	6039      	str	r1, [r7, #0]
 8005f26:	4649      	mov	r1, r9
 8005f28:	414b      	adcs	r3, r1
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f38:	4659      	mov	r1, fp
 8005f3a:	00cb      	lsls	r3, r1, #3
 8005f3c:	4651      	mov	r1, sl
 8005f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f42:	4651      	mov	r1, sl
 8005f44:	00ca      	lsls	r2, r1, #3
 8005f46:	4610      	mov	r0, r2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	189b      	adds	r3, r3, r2
 8005f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f52:	464b      	mov	r3, r9
 8005f54:	460a      	mov	r2, r1
 8005f56:	eb42 0303 	adc.w	r3, r2, r3
 8005f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f66:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f74:	4649      	mov	r1, r9
 8005f76:	008b      	lsls	r3, r1, #2
 8005f78:	4641      	mov	r1, r8
 8005f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7e:	4641      	mov	r1, r8
 8005f80:	008a      	lsls	r2, r1, #2
 8005f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f86:	f7fa f91f 	bl	80001c8 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005f90:	fba3 1302 	umull	r1, r3, r3, r2
 8005f94:	095b      	lsrs	r3, r3, #5
 8005f96:	2164      	movs	r1, #100	@ 0x64
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	3332      	adds	r3, #50	@ 0x32
 8005fa2:	4a08      	ldr	r2, [pc, #32]	@ (8005fc4 <UART_SetConfig+0x4e4>)
 8005fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4422      	add	r2, r4
 8005fb6:	609a      	str	r2, [r3, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fc4:	51eb851f 	.word	0x51eb851f

08005fc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc8:	b084      	sub	sp, #16
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	f107 001c 	add.w	r0, r7, #28
 8005fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d123      	bne.n	800602a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800600a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800600e:	2b01      	cmp	r3, #1
 8006010:	d105      	bne.n	800601e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9dc 	bl	80063dc <USB_CoreReset>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]
 8006028:	e01b      	b.n	8006062 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f9d0 	bl	80063dc <USB_CoreReset>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006040:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	@ 0x38
 8006054:	e005      	b.n	8006062 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006062:	7fbb      	ldrb	r3, [r7, #30]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d10b      	bne.n	8006080 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f043 0206 	orr.w	r2, r3, #6
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800608c:	b004      	add	sp, #16
 800608e:	4770      	bx	lr

08006090 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f043 0201 	orr.w	r2, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 0201 	bic.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d115      	bne.n	8006122 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006102:	200a      	movs	r0, #10
 8006104:	f7fa ff1c 	bl	8000f40 <HAL_Delay>
      ms += 10U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	330a      	adds	r3, #10
 800610c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f956 	bl	80063c0 <USB_GetMode>
 8006114:	4603      	mov	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d01e      	beq.n	8006158 <USB_SetCurrentMode+0x84>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2bc7      	cmp	r3, #199	@ 0xc7
 800611e:	d9f0      	bls.n	8006102 <USB_SetCurrentMode+0x2e>
 8006120:	e01a      	b.n	8006158 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d115      	bne.n	8006154 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006134:	200a      	movs	r0, #10
 8006136:	f7fa ff03 	bl	8000f40 <HAL_Delay>
      ms += 10U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	330a      	adds	r3, #10
 800613e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f93d 	bl	80063c0 <USB_GetMode>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d005      	beq.n	8006158 <USB_SetCurrentMode+0x84>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006150:	d9f0      	bls.n	8006134 <USB_SetCurrentMode+0x60>
 8006152:	e001      	b.n	8006158 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e005      	b.n	8006164 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2bc8      	cmp	r3, #200	@ 0xc8
 800615c:	d101      	bne.n	8006162 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3301      	adds	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006186:	d901      	bls.n	800618c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e01b      	b.n	80061c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	daf2      	bge.n	800617a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	019b      	lsls	r3, r3, #6
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3301      	adds	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061b0:	d901      	bls.n	80061b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e006      	b.n	80061c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d0f0      	beq.n	80061a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061e8:	d901      	bls.n	80061ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e018      	b.n	8006220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	daf2      	bge.n	80061dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2210      	movs	r2, #16
 80061fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800620c:	d901      	bls.n	8006212 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e006      	b.n	8006220 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0310 	and.w	r3, r3, #16
 800621a:	2b10      	cmp	r3, #16
 800621c:	d0f0      	beq.n	8006200 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800622c:	b480      	push	{r7}
 800622e:	b089      	sub	sp, #36	@ 0x24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	460b      	mov	r3, r1
 800623c:	71fb      	strb	r3, [r7, #7]
 800623e:	4613      	mov	r3, r2
 8006240:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800624a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d123      	bne.n	800629a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006252:	88bb      	ldrh	r3, [r7, #4]
 8006254:	3303      	adds	r3, #3
 8006256:	089b      	lsrs	r3, r3, #2
 8006258:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800625a:	2300      	movs	r3, #0
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e018      	b.n	8006292 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	031a      	lsls	r2, r3, #12
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800626c:	461a      	mov	r2, r3
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3301      	adds	r3, #1
 8006278:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	3301      	adds	r3, #1
 800627e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	3301      	adds	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	3301      	adds	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d3e2      	bcc.n	8006260 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3724      	adds	r7, #36	@ 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b08b      	sub	sp, #44	@ 0x2c
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	f003 0303 	and.w	r3, r3, #3
 80062cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ce:	2300      	movs	r3, #0
 80062d0:	623b      	str	r3, [r7, #32]
 80062d2:	e014      	b.n	80062fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	601a      	str	r2, [r3, #0]
    pDest++;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	3301      	adds	r3, #1
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	3301      	adds	r3, #1
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	3301      	adds	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	3301      	adds	r3, #1
 80062fc:	623b      	str	r3, [r7, #32]
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	429a      	cmp	r2, r3
 8006304:	d3e6      	bcc.n	80062d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006306:	8bfb      	ldrh	r3, [r7, #30]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01e      	beq.n	800634a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006316:	461a      	mov	r2, r3
 8006318:	f107 0310 	add.w	r3, r7, #16
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	fa22 f303 	lsr.w	r3, r2, r3
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	701a      	strb	r2, [r3, #0]
      i++;
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	3301      	adds	r3, #1
 8006336:	623b      	str	r3, [r7, #32]
      pDest++;
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	3301      	adds	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800633e:	8bfb      	ldrh	r3, [r7, #30]
 8006340:	3b01      	subs	r3, #1
 8006342:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006344:	8bfb      	ldrh	r3, [r7, #30]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1ea      	bne.n	8006320 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800634c:	4618      	mov	r0, r3
 800634e:	372c      	adds	r7, #44	@ 0x2c
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	4013      	ands	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063b2:	68bb      	ldr	r3, [r7, #8]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0301 	and.w	r3, r3, #1
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063f4:	d901      	bls.n	80063fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e01b      	b.n	8006432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	daf2      	bge.n	80063e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800641e:	d901      	bls.n	8006424 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b01      	cmp	r3, #1
 800642e:	d0f0      	beq.n	8006412 <USB_CoreReset+0x36>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006440:	b084      	sub	sp, #16
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800644e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006460:	461a      	mov	r2, r3
 8006462:	2300      	movs	r3, #0
 8006464:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006476:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d119      	bne.n	80064ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800649a:	2b01      	cmp	r3, #1
 800649c:	d10a      	bne.n	80064b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064ac:	f043 0304 	orr.w	r3, r3, #4
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e014      	b.n	80064de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064c2:	f023 0304 	bic.w	r3, r3, #4
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	e009      	b.n	80064de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064de:	2110      	movs	r1, #16
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff fe43 	bl	800616c <USB_FlushTxFifo>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff fe6d 	bl	80061d0 <USB_FlushRxFifo>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	e015      	b.n	8006532 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006512:	461a      	mov	r2, r3
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006526:	461a      	mov	r2, r3
 8006528:	2300      	movs	r3, #0
 800652a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3301      	adds	r3, #1
 8006530:	613b      	str	r3, [r7, #16]
 8006532:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006536:	461a      	mov	r2, r3
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4293      	cmp	r3, r2
 800653c:	d3e3      	bcc.n	8006506 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a18      	ldr	r2, [pc, #96]	@ (80065b0 <USB_HostInit+0x170>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10b      	bne.n	800656c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <USB_HostInit+0x174>)
 8006560:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a14      	ldr	r2, [pc, #80]	@ (80065b8 <USB_HostInit+0x178>)
 8006566:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800656a:	e009      	b.n	8006580 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a11      	ldr	r2, [pc, #68]	@ (80065bc <USB_HostInit+0x17c>)
 8006576:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a11      	ldr	r2, [pc, #68]	@ (80065c0 <USB_HostInit+0x180>)
 800657c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f043 0210 	orr.w	r2, r3, #16
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	4b0a      	ldr	r3, [pc, #40]	@ (80065c4 <USB_HostInit+0x184>)
 800659a:	4313      	orrs	r3, r2
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ac:	b004      	add	sp, #16
 80065ae:	4770      	bx	lr
 80065b0:	40040000 	.word	0x40040000
 80065b4:	01000200 	.word	0x01000200
 80065b8:	00e00300 	.word	0x00e00300
 80065bc:	00600080 	.word	0x00600080
 80065c0:	004000e0 	.word	0x004000e0
 80065c4:	a3200008 	.word	0xa3200008

080065c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065e6:	f023 0303 	bic.w	r3, r3, #3
 80065ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006600:	4313      	orrs	r3, r2
 8006602:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d107      	bne.n	800661a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006610:	461a      	mov	r2, r3
 8006612:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006616:	6053      	str	r3, [r2, #4]
 8006618:	e00c      	b.n	8006634 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d107      	bne.n	8006630 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006626:	461a      	mov	r2, r3
 8006628:	f241 7370 	movw	r3, #6000	@ 0x1770
 800662c:	6053      	str	r3, [r2, #4]
 800662e:	e001      	b.n	8006634 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006662:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800666c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006670:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006672:	2064      	movs	r0, #100	@ 0x64
 8006674:	f7fa fc64 	bl	8000f40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006684:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006686:	200a      	movs	r0, #10
 8006688:	f7fa fc5a 	bl	8000f40 <HAL_Delay>

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006696:	b480      	push	{r7}
 8006698:	b085      	sub	sp, #20
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <USB_DriveVbus+0x44>
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d106      	bne.n	80066da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e4:	d109      	bne.n	80066fa <USB_DriveVbus+0x64>
 80066e6:	78fb      	ldrb	r3, [r7, #3]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0c5b      	lsrs	r3, r3, #17
 8006726:	f003 0303 	and.w	r3, r3, #3
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	b29b      	uxth	r3, r3
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4603      	mov	r3, r0
 8006768:	70fb      	strb	r3, [r7, #3]
 800676a:	460b      	mov	r3, r1
 800676c:	70bb      	strb	r3, [r7, #2]
 800676e:	4613      	mov	r3, r2
 8006770:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4413      	add	r3, r2
 8006782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800678e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006792:	2b03      	cmp	r3, #3
 8006794:	d87c      	bhi.n	8006890 <USB_HC_Init+0x138>
 8006796:	a201      	add	r2, pc, #4	@ (adr r2, 800679c <USB_HC_Init+0x44>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	08006853 	.word	0x08006853
 80067a4:	080067ad 	.word	0x080067ad
 80067a8:	08006815 	.word	0x08006815
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b8:	461a      	mov	r2, r3
 80067ba:	f240 439d 	movw	r3, #1181	@ 0x49d
 80067be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	da10      	bge.n	80067ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	78fa      	ldrb	r2, [r7, #3]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067e6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80067e8:	e055      	b.n	8006896 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a6f      	ldr	r2, [pc, #444]	@ (80069ac <USB_HC_Init+0x254>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d151      	bne.n	8006896 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800680c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006810:	60d3      	str	r3, [r2, #12]
      break;
 8006812:	e040      	b.n	8006896 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006820:	461a      	mov	r2, r3
 8006822:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	da34      	bge.n	800689a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006850:	e023      	b.n	800689a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685e:	461a      	mov	r2, r3
 8006860:	f240 2325 	movw	r3, #549	@ 0x225
 8006864:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006866:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800686a:	2b00      	cmp	r3, #0
 800686c:	da17      	bge.n	800689e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4413      	add	r3, r2
 8006876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	440a      	add	r2, r1
 8006884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006888:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800688c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800688e:	e006      	b.n	800689e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	77fb      	strb	r3, [r7, #31]
      break;
 8006894:	e004      	b.n	80068a0 <USB_HC_Init+0x148>
      break;
 8006896:	bf00      	nop
 8006898:	e002      	b.n	80068a0 <USB_HC_Init+0x148>
      break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <USB_HC_Init+0x148>
      break;
 800689e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068cc:	f043 0302 	orr.w	r3, r3, #2
 80068d0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 030f 	and.w	r3, r3, #15
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	6939      	ldr	r1, [r7, #16]
 80068e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068ec:	4313      	orrs	r3, r2
 80068ee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006900:	2b00      	cmp	r3, #0
 8006902:	da03      	bge.n	800690c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e001      	b.n	8006910 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff fef9 	bl	8006708 <USB_GetHostSpeed>
 8006916:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006918:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800691c:	2b02      	cmp	r3, #2
 800691e:	d106      	bne.n	800692e <USB_HC_Init+0x1d6>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d003      	beq.n	800692e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e001      	b.n	8006932 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006932:	787b      	ldrb	r3, [r7, #1]
 8006934:	059b      	lsls	r3, r3, #22
 8006936:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800693a:	78bb      	ldrb	r3, [r7, #2]
 800693c:	02db      	lsls	r3, r3, #11
 800693e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006942:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006944:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006948:	049b      	lsls	r3, r3, #18
 800694a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800694e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006950:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006952:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006956:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	431a      	orrs	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800696c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006970:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006976:	2b03      	cmp	r3, #3
 8006978:	d003      	beq.n	8006982 <USB_HC_Init+0x22a>
 800697a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10f      	bne.n	80069a2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800699c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069a0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80069a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40040000 	.word	0x40040000

080069b0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08c      	sub	sp, #48	@ 0x30
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80069c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069cc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b48 <USB_HC_StartXfer+0x198>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d12f      	bne.n	8006a36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d11c      	bne.n	8006a16 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	7c9b      	ldrb	r3, [r3, #18]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <USB_HC_StartXfer+0x3c>
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	7c9b      	ldrb	r3, [r3, #18]
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d124      	bne.n	8006a36 <USB_HC_StartXfer+0x86>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	799b      	ldrb	r3, [r3, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d120      	bne.n	8006a36 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	60d3      	str	r3, [r2, #12]
 8006a14:	e00f      	b.n	8006a36 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	791b      	ldrb	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10b      	bne.n	8006a36 <USB_HC_StartXfer+0x86>
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	795b      	ldrb	r3, [r3, #5]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fb6b 	bl	8007108 <USB_DoPing>
        return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e232      	b.n	8006e9c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	799b      	ldrb	r3, [r3, #6]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d158      	bne.n	8006af0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	78db      	ldrb	r3, [r3, #3]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	8a92      	ldrh	r2, [r2, #20]
 8006a50:	fb03 f202 	mul.w	r2, r3, r2
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61da      	str	r2, [r3, #28]
 8006a58:	e07c      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7c9b      	ldrb	r3, [r3, #18]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d130      	bne.n	8006ac4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a68:	d918      	bls.n	8006a9c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	8a9b      	ldrh	r3, [r3, #20]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d003      	beq.n	8006a8c <USB_HC_StartXfer+0xdc>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d103      	bne.n	8006a94 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	e05f      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2201      	movs	r2, #1
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e05b      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d007      	beq.n	8006abc <USB_HC_StartXfer+0x10c>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d003      	beq.n	8006abc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	e04b      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2203      	movs	r2, #3
 8006ac0:	60da      	str	r2, [r3, #12]
 8006ac2:	e047      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d10d      	bne.n	8006ae6 <USB_HC_StartXfer+0x136>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	8a92      	ldrh	r2, [r2, #20]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d907      	bls.n	8006ae6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	8a92      	ldrh	r2, [r2, #20]
 8006adc:	fb03 f202 	mul.w	r2, r3, r2
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61da      	str	r2, [r3, #28]
 8006ae4:	e036      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6a1a      	ldr	r2, [r3, #32]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	61da      	str	r2, [r3, #28]
 8006aee:	e031      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d018      	beq.n	8006b2a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	8a92      	ldrh	r2, [r2, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	3b01      	subs	r3, #1
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	8a92      	ldrh	r2, [r2, #20]
 8006b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d90b      	bls.n	8006b2e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b16:	8b7b      	ldrh	r3, [r7, #26]
 8006b18:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	8a92      	ldrh	r2, [r2, #20]
 8006b20:	fb03 f202 	mul.w	r2, r3, r2
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61da      	str	r2, [r3, #28]
 8006b28:	e001      	b.n	8006b2e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	78db      	ldrb	r3, [r3, #3]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	8a92      	ldrh	r2, [r2, #20]
 8006b3c:	fb03 f202 	mul.w	r2, r3, r2
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61da      	str	r2, [r3, #28]
 8006b44:	e006      	b.n	8006b54 <USB_HC_StartXfer+0x1a4>
 8006b46:	bf00      	nop
 8006b48:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b5c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b5e:	04d9      	lsls	r1, r3, #19
 8006b60:	4ba3      	ldr	r3, [pc, #652]	@ (8006df0 <USB_HC_StartXfer+0x440>)
 8006b62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	7d9b      	ldrb	r3, [r3, #22]
 8006b6a:	075b      	lsls	r3, r3, #29
 8006b6c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b70:	69f9      	ldr	r1, [r7, #28]
 8006b72:	0148      	lsls	r0, r1, #5
 8006b74:	6a39      	ldr	r1, [r7, #32]
 8006b76:	4401      	add	r1, r0
 8006b78:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b80:	79fb      	ldrb	r3, [r7, #7]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	015a      	lsls	r2, r3, #5
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	4413      	add	r3, r2
 8006b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b96:	460a      	mov	r2, r1
 8006b98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bf0c      	ite	eq
 8006baa:	2301      	moveq	r3, #1
 8006bac:	2300      	movne	r3, #0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	6a3a      	ldr	r2, [r7, #32]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bcc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bd0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	7e7b      	ldrb	r3, [r7, #25]
 8006be2:	075b      	lsls	r3, r3, #29
 8006be4:	69f9      	ldr	r1, [r7, #28]
 8006be6:	0148      	lsls	r0, r1, #5
 8006be8:	6a39      	ldr	r1, [r7, #32]
 8006bea:	4401      	add	r1, r0
 8006bec:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	799b      	ldrb	r3, [r3, #6]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	f040 80c3 	bne.w	8006d84 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	7c5b      	ldrb	r3, [r3, #17]
 8006c02:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c1a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	6a3a      	ldr	r2, [r7, #32]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	79db      	ldrb	r3, [r3, #7]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d123      	bne.n	8006c8c <USB_HC_StartXfer+0x2dc>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	78db      	ldrb	r3, [r3, #3]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11f      	bne.n	8006c8c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c6a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	6a3a      	ldr	r2, [r7, #32]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c8a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	7c9b      	ldrb	r3, [r3, #18]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d003      	beq.n	8006c9c <USB_HC_StartXfer+0x2ec>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	7c9b      	ldrb	r3, [r3, #18]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d117      	bne.n	8006ccc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d113      	bne.n	8006ccc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d10f      	bne.n	8006ccc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	7c9b      	ldrb	r3, [r3, #18]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d162      	bne.n	8006d9a <USB_HC_StartXfer+0x3ea>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	78db      	ldrb	r3, [r3, #3]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d15e      	bne.n	8006d9a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d858      	bhi.n	8006d98 <USB_HC_StartXfer+0x3e8>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <USB_HC_StartXfer+0x33c>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d1f 	.word	0x08006d1f
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d63 	.word	0x08006d63
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1a:	6053      	str	r3, [r2, #4]
          break;
 8006d1c:	e03d      	b.n	8006d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d38:	f043 030e 	orr.w	r3, r3, #14
 8006d3c:	6053      	str	r3, [r2, #4]
          break;
 8006d3e:	e02c      	b.n	8006d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d5e:	6053      	str	r3, [r2, #4]
          break;
 8006d60:	e01b      	b.n	8006d9a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	6a3a      	ldr	r2, [r7, #32]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d80:	6053      	str	r3, [r2, #4]
          break;
 8006d82:	e00a      	b.n	8006d9a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d90:	461a      	mov	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	6053      	str	r3, [r2, #4]
 8006d96:	e000      	b.n	8006d9a <USB_HC_StartXfer+0x3ea>
          break;
 8006d98:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006db0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	e003      	b.n	8006dcc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006dd2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de0:	461a      	mov	r2, r3
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e055      	b.n	8006e9c <USB_HC_StartXfer+0x4ec>
 8006df0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	78db      	ldrb	r3, [r3, #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d14e      	bne.n	8006e9a <USB_HC_StartXfer+0x4ea>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d04a      	beq.n	8006e9a <USB_HC_StartXfer+0x4ea>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	79db      	ldrb	r3, [r3, #7]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d146      	bne.n	8006e9a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	7c9b      	ldrb	r3, [r3, #18]
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d831      	bhi.n	8006e78 <USB_HC_StartXfer+0x4c8>
 8006e14:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <USB_HC_StartXfer+0x46c>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e2d 	.word	0x08006e2d
 8006e20:	08006e51 	.word	0x08006e51
 8006e24:	08006e2d 	.word	0x08006e2d
 8006e28:	08006e51 	.word	0x08006e51
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	3303      	adds	r3, #3
 8006e32:	089b      	lsrs	r3, r3, #2
 8006e34:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e36:	8afa      	ldrh	r2, [r7, #22]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d91c      	bls.n	8006e7c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f043 0220 	orr.w	r2, r3, #32
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e4e:	e015      	b.n	8006e7c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	3303      	adds	r3, #3
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e5a:	8afa      	ldrh	r2, [r7, #22]
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d90a      	bls.n	8006e80 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e76:	e003      	b.n	8006e80 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <USB_HC_StartXfer+0x4d2>
        break;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <USB_HC_StartXfer+0x4d2>
        break;
 8006e80:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6999      	ldr	r1, [r3, #24]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	785a      	ldrb	r2, [r3, #1]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2000      	movs	r0, #0
 8006e92:	9000      	str	r0, [sp, #0]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff f9c9 	bl	800622c <USB_WritePacket>
  }

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	@ 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	b29b      	uxth	r3, r3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b089      	sub	sp, #36	@ 0x24
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	0c9b      	lsrs	r3, r3, #18
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	0fdb      	lsrs	r3, r3, #31
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	0fdb      	lsrs	r3, r3, #31
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d10d      	bne.n	8006f48 <USB_HC_Halt+0x82>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <USB_HC_Halt+0x82>
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d002      	beq.n	8006f44 <USB_HC_Halt+0x7e>
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d101      	bne.n	8006f48 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e0d8      	b.n	80070fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <USB_HC_Halt+0x8e>
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d173      	bne.n	800703c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f72:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d14a      	bne.n	8007016 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d133      	bne.n	8006ff4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	0151      	lsls	r1, r2, #5
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	440a      	add	r2, r1
 8006fc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fd8:	d82e      	bhi.n	8007038 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ff0:	d0ec      	beq.n	8006fcc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ff2:	e081      	b.n	80070f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007012:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007014:	e070      	b.n	80070f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	69fa      	ldr	r2, [r7, #28]
 800702a:	440a      	add	r2, r1
 800702c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007034:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007036:	e05f      	b.n	80070f8 <USB_HC_Halt+0x232>
            break;
 8007038:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800703a:	e05d      	b.n	80070f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	440a      	add	r2, r1
 8007052:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800705a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d133      	bne.n	80070d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800708a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070b8:	d81d      	bhi.n	80070f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070d0:	d0ec      	beq.n	80070ac <USB_HC_Halt+0x1e6>
 80070d2:	e011      	b.n	80070f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e000      	b.n	80070f8 <USB_HC_Halt+0x232>
          break;
 80070f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3724      	adds	r7, #36	@ 0x24
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800711c:	2301      	movs	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	04da      	lsls	r2, r3, #19
 8007124:	4b15      	ldr	r3, [pc, #84]	@ (800717c <USB_DoPing+0x74>)
 8007126:	4013      	ands	r3, r2
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	440a      	add	r2, r1
 8007130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007138:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007150:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007158:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	1ff80000 	.word	0x1ff80000

08007180 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7fe ff8c 	bl	80060b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800719a:	2110      	movs	r1, #16
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7fe ffe5 	bl	800616c <USB_FlushTxFifo>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff f80f 	bl	80061d0 <USB_FlushRxFifo>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	e01f      	b.n	8007202 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f6:	461a      	mov	r2, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	3301      	adds	r3, #1
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b0f      	cmp	r3, #15
 8007206:	d9dc      	bls.n	80071c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	e034      	b.n	8007278 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	4413      	add	r3, r2
 8007216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007224:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800722c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007234:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007242:	461a      	mov	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007254:	d80c      	bhi.n	8007270 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4413      	add	r3, r2
 800725e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800726c:	d0ec      	beq.n	8007248 <USB_StopHost+0xc8>
 800726e:	e000      	b.n	8007272 <USB_StopHost+0xf2>
        break;
 8007270:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	3301      	adds	r3, #1
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	2b0f      	cmp	r3, #15
 800727c:	d9c7      	bls.n	800720e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007284:	461a      	mov	r2, r3
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7fe fefb 	bl	8006090 <USB_EnableGlobalInt>

  return ret;
 800729a:	7ffb      	ldrb	r3, [r7, #31]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b089      	sub	sp, #36	@ 0x24
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80072ac:	2301      	movs	r3, #1
 80072ae:	2202      	movs	r2, #2
 80072b0:	2102      	movs	r1, #2
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fc85 	bl	8007bc2 <USBH_FindInterface>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	2bff      	cmp	r3, #255	@ 0xff
 80072c0:	d002      	beq.n	80072c8 <USBH_CDC_InterfaceInit+0x24>
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d901      	bls.n	80072cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072c8:	2302      	movs	r3, #2
 80072ca:	e13d      	b.n	8007548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc5a 	bl	8007b8a <USBH_SelectInterface>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80072e0:	2302      	movs	r3, #2
 80072e2:	e131      	b.n	8007548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80072ea:	2050      	movs	r0, #80	@ 0x50
 80072ec:	f002 fb64 	bl	80099b8 <malloc>
 80072f0:	4603      	mov	r3, r0
 80072f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007304:	2302      	movs	r3, #2
 8007306:	e11f      	b.n	8007548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007308:	2250      	movs	r2, #80	@ 0x50
 800730a:	2100      	movs	r1, #0
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f002 fc11 	bl	8009b34 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	211a      	movs	r1, #26
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	b25b      	sxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	da15      	bge.n	8007356 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	211a      	movs	r1, #26
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007350:	881a      	ldrh	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	785b      	ldrb	r3, [r3, #1]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 ffbe 	bl	80092de <USBH_AllocPipe>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	7819      	ldrb	r1, [r3, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	7858      	ldrb	r0, [r3, #1]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	8952      	ldrh	r2, [r2, #10]
 8007382:	9202      	str	r2, [sp, #8]
 8007384:	2203      	movs	r2, #3
 8007386:	9201      	str	r2, [sp, #4]
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	4623      	mov	r3, r4
 800738c:	4602      	mov	r2, r0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 ff76 	bl	8009280 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f002 fa85 	bl	80098ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80073a2:	2300      	movs	r3, #0
 80073a4:	2200      	movs	r2, #0
 80073a6:	210a      	movs	r1, #10
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc0a 	bl	8007bc2 <USBH_FindInterface>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	2bff      	cmp	r3, #255	@ 0xff
 80073b6:	d002      	beq.n	80073be <USBH_CDC_InterfaceInit+0x11a>
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d901      	bls.n	80073c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073be:	2302      	movs	r3, #2
 80073c0:	e0c2      	b.n	8007548 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	211a      	movs	r1, #26
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	4413      	add	r3, r2
 80073ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	b25b      	sxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	da16      	bge.n	8007408 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	211a      	movs	r1, #26
 80073e0:	fb01 f303 	mul.w	r3, r1, r3
 80073e4:	4413      	add	r3, r2
 80073e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	211a      	movs	r1, #26
 80073f6:	fb01 f303 	mul.w	r3, r1, r3
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007400:	881a      	ldrh	r2, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	835a      	strh	r2, [r3, #26]
 8007406:	e015      	b.n	8007434 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	211a      	movs	r1, #26
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	4413      	add	r3, r2
 8007414:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	211a      	movs	r1, #26
 8007424:	fb01 f303 	mul.w	r3, r1, r3
 8007428:	4413      	add	r3, r2
 800742a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800742e:	881a      	ldrh	r2, [r3, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	211a      	movs	r1, #26
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b25b      	sxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	da16      	bge.n	800747a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	211a      	movs	r1, #26
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	4413      	add	r3, r2
 8007458:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	211a      	movs	r1, #26
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	4413      	add	r3, r2
 800746e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007472:	881a      	ldrh	r2, [r3, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	835a      	strh	r2, [r3, #26]
 8007478:	e015      	b.n	80074a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	211a      	movs	r1, #26
 8007480:	fb01 f303 	mul.w	r3, r1, r3
 8007484:	4413      	add	r3, r2
 8007486:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800748a:	781a      	ldrb	r2, [r3, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	211a      	movs	r1, #26
 8007496:	fb01 f303 	mul.w	r3, r1, r3
 800749a:	4413      	add	r3, r2
 800749c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074a0:	881a      	ldrh	r2, [r3, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	7b9b      	ldrb	r3, [r3, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 ff16 	bl	80092de <USBH_AllocPipe>
 80074b2:	4603      	mov	r3, r0
 80074b4:	461a      	mov	r2, r3
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7bdb      	ldrb	r3, [r3, #15]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 ff0c 	bl	80092de <USBH_AllocPipe>
 80074c6:	4603      	mov	r3, r0
 80074c8:	461a      	mov	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	7b59      	ldrb	r1, [r3, #13]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	7b98      	ldrb	r0, [r3, #14]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	8b12      	ldrh	r2, [r2, #24]
 80074e6:	9202      	str	r2, [sp, #8]
 80074e8:	2202      	movs	r2, #2
 80074ea:	9201      	str	r2, [sp, #4]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4623      	mov	r3, r4
 80074f0:	4602      	mov	r2, r0
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fec4 	bl	8009280 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	7b19      	ldrb	r1, [r3, #12]
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	7bd8      	ldrb	r0, [r3, #15]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	8b52      	ldrh	r2, [r2, #26]
 8007510:	9202      	str	r2, [sp, #8]
 8007512:	2202      	movs	r2, #2
 8007514:	9201      	str	r2, [sp, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	4623      	mov	r3, r4
 800751a:	4602      	mov	r2, r0
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 feaf 	bl	8009280 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	7b5b      	ldrb	r3, [r3, #13]
 800752e:	2200      	movs	r2, #0
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f002 f9ba 	bl	80098ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	7b1b      	ldrb	r3, [r3, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f002 f9b3 	bl	80098ac <USBH_LL_SetToggle>

  return USBH_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	bd90      	pop	{r4, r7, pc}

08007550 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00e      	beq.n	8007588 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fea4 	bl	80092be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f001 fecf 	bl	8009320 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	7b1b      	ldrb	r3, [r3, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	7b1b      	ldrb	r3, [r3, #12]
 8007594:	4619      	mov	r1, r3
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fe91 	bl	80092be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	7b1b      	ldrb	r3, [r3, #12]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 febc 	bl	8009320 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	7b5b      	ldrb	r3, [r3, #13]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	7b5b      	ldrb	r3, [r3, #13]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fe7e 	bl	80092be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	7b5b      	ldrb	r3, [r3, #13]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fea9 	bl	8009320 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f002 f9ed 	bl	80099c8 <free>
    phost->pActiveClass->pData = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075f4:	2200      	movs	r2, #0
 80075f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3340      	adds	r3, #64	@ 0x40
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8b1 	bl	8007782 <GetLineCoding>
 8007620:	4603      	mov	r3, r0
 8007622:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007630:	2102      	movs	r1, #2
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007636:	7afb      	ldrb	r3, [r7, #11]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007648:	2301      	movs	r3, #1
 800764a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007660:	2b04      	cmp	r3, #4
 8007662:	d877      	bhi.n	8007754 <USBH_CDC_Process+0x114>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <USBH_CDC_Process+0x2c>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007681 	.word	0x08007681
 8007670:	08007687 	.word	0x08007687
 8007674:	080076b7 	.word	0x080076b7
 8007678:	0800772b 	.word	0x0800772b
 800767c:	08007739 	.word	0x08007739
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
      break;
 8007684:	e06d      	b.n	8007762 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f897 	bl	80077c0 <SetLineCoding>
 8007692:	4603      	mov	r3, r0
 8007694:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076a4:	e058      	b.n	8007758 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d055      	beq.n	8007758 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2204      	movs	r2, #4
 80076b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80076b4:	e050      	b.n	8007758 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	3340      	adds	r3, #64	@ 0x40
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f860 	bl	8007782 <GetLineCoding>
 80076c2:	4603      	mov	r3, r0
 80076c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d126      	bne.n	800771a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076de:	791b      	ldrb	r3, [r3, #4]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d13b      	bne.n	800775c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d133      	bne.n	800775c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007700:	429a      	cmp	r2, r3
 8007702:	d12b      	bne.n	800775c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800770e:	429a      	cmp	r2, r3
 8007710:	d124      	bne.n	800775c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f958 	bl	80079c8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007718:	e020      	b.n	800775c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d01d      	beq.n	800775c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2204      	movs	r2, #4
 8007724:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007728:	e018      	b.n	800775c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f867 	bl	80077fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f8da 	bl	80078ea <CDC_ProcessReception>
      break;
 8007736:	e014      	b.n	8007762 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007738:	2100      	movs	r1, #0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 f81a 	bl	8008774 <USBH_ClrFeature>
 8007740:	4603      	mov	r3, r0
 8007742:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007752:	e005      	b.n	8007760 <USBH_CDC_Process+0x120>

    default:
      break;
 8007754:	bf00      	nop
 8007756:	e004      	b.n	8007762 <USBH_CDC_Process+0x122>
      break;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <USBH_CDC_Process+0x122>
      break;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <USBH_CDC_Process+0x122>
      break;
 8007760:	bf00      	nop

  }

  return status;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	22a1      	movs	r2, #161	@ 0xa1
 8007790:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2221      	movs	r2, #33	@ 0x21
 8007796:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2207      	movs	r2, #7
 80077a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2207      	movs	r2, #7
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fb14 	bl	8008dde <USBH_CtlReq>
 80077b6:	4603      	mov	r3, r0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2221      	movs	r2, #33	@ 0x21
 80077ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2207      	movs	r2, #7
 80077e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2207      	movs	r2, #7
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 faf5 	bl	8008dde <USBH_CtlReq>
 80077f4:	4603      	mov	r3, r0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b086      	sub	sp, #24
 8007802:	af02      	add	r7, sp, #8
 8007804:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007810:	2300      	movs	r3, #0
 8007812:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800781a:	2b01      	cmp	r3, #1
 800781c:	d002      	beq.n	8007824 <CDC_ProcessTransmission+0x26>
 800781e:	2b02      	cmp	r3, #2
 8007820:	d023      	beq.n	800786a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007822:	e05e      	b.n	80078e2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	8b12      	ldrh	r2, [r2, #24]
 800782c:	4293      	cmp	r3, r2
 800782e:	d90b      	bls.n	8007848 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	69d9      	ldr	r1, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	8b1a      	ldrh	r2, [r3, #24]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	7b5b      	ldrb	r3, [r3, #13]
 800783c:	2001      	movs	r0, #1
 800783e:	9000      	str	r0, [sp, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fcda 	bl	80091fa <USBH_BulkSendData>
 8007846:	e00b      	b.n	8007860 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	7b5b      	ldrb	r3, [r3, #13]
 8007856:	2001      	movs	r0, #1
 8007858:	9000      	str	r0, [sp, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fccd 	bl	80091fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007868:	e03b      	b.n	80078e2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	7b5b      	ldrb	r3, [r3, #13]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fff1 	bl	8009858 <USBH_LL_GetURBState>
 8007876:	4603      	mov	r3, r0
 8007878:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800787a:	7afb      	ldrb	r3, [r7, #11]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d128      	bne.n	80078d2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	8b12      	ldrh	r2, [r2, #24]
 8007888:	4293      	cmp	r3, r2
 800788a:	d90e      	bls.n	80078aa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	8b12      	ldrh	r2, [r2, #24]
 8007894:	1a9a      	subs	r2, r3, r2
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	8b12      	ldrh	r2, [r2, #24]
 80078a2:	441a      	add	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	61da      	str	r2, [r3, #28]
 80078a8:	e002      	b.n	80078b0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078c0:	e00e      	b.n	80078e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f868 	bl	80079a0 <USBH_CDC_TransmitCallback>
      break;
 80078d0:	e006      	b.n	80078e0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d103      	bne.n	80078e0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078e0:	bf00      	nop
  }
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b086      	sub	sp, #24
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007906:	2b03      	cmp	r3, #3
 8007908:	d002      	beq.n	8007910 <CDC_ProcessReception+0x26>
 800790a:	2b04      	cmp	r3, #4
 800790c:	d00e      	beq.n	800792c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800790e:	e043      	b.n	8007998 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6a19      	ldr	r1, [r3, #32]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	8b5a      	ldrh	r2, [r3, #26]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	7b1b      	ldrb	r3, [r3, #12]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fc91 	bl	8009244 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2204      	movs	r2, #4
 8007926:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800792a:	e035      	b.n	8007998 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	7b1b      	ldrb	r3, [r3, #12]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 ff90 	bl	8009858 <USBH_LL_GetURBState>
 8007938:	4603      	mov	r3, r0
 800793a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800793c:	7cfb      	ldrb	r3, [r7, #19]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d129      	bne.n	8007996 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	7b1b      	ldrb	r3, [r3, #12]
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fef3 	bl	8009734 <USBH_LL_GetLastXferSize>
 800794e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	429a      	cmp	r2, r3
 8007958:	d016      	beq.n	8007988 <CDC_ProcessReception+0x9e>
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	8b5b      	ldrh	r3, [r3, #26]
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4293      	cmp	r3, r2
 8007964:	d910      	bls.n	8007988 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6a1a      	ldr	r2, [r3, #32]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	441a      	add	r2, r3
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2203      	movs	r2, #3
 8007982:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007986:	e006      	b.n	8007996 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f80f 	bl	80079b4 <USBH_CDC_ReceiveCallback>
      break;
 8007996:	bf00      	nop
  }
}
 8007998:	bf00      	nop
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079f0:	2302      	movs	r3, #2
 80079f2:	e029      	b.n	8007a48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	79fa      	ldrb	r2, [r7, #7]
 80079f8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f81f 	bl	8007a50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f001 fdc3 	bl	80095cc <USBH_LL_Init>

  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e009      	b.n	8007a76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	33e0      	adds	r3, #224	@ 0xe0
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2b0f      	cmp	r3, #15
 8007a7a:	d9f2      	bls.n	8007a62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e009      	b.n	8007a96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3301      	adds	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d3f1      	bcc.n	8007a82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2240      	movs	r2, #64	@ 0x40
 8007ac2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	331c      	adds	r3, #28
 8007aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 f81d 	bl	8009b34 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f002 f814 	bl	8009b34 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b12:	2212      	movs	r2, #18
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 f80c 	bl	8009b34 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b22:	223e      	movs	r2, #62	@ 0x3e
 8007b24:	2100      	movs	r1, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f002 f804 	bl	8009b34 <memset>

  return USBH_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10e      	bne.n	8007b72 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b5a:	1c59      	adds	r1, r3, #1
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	33de      	adds	r3, #222	@ 0xde
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e004      	b.n	8007b7c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b72:	2302      	movs	r3, #2
 8007b74:	73fb      	strb	r3, [r7, #15]
 8007b76:	e001      	b.n	8007b7c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b96:	2300      	movs	r3, #0
 8007b98:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d204      	bcs.n	8007bb0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007bae:	e001      	b.n	8007bb4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	4608      	mov	r0, r1
 8007bcc:	4611      	mov	r1, r2
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	70fb      	strb	r3, [r7, #3]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70bb      	strb	r3, [r7, #2]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007bea:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bec:	e025      	b.n	8007c3a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	221a      	movs	r2, #26
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	795b      	ldrb	r3, [r3, #5]
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d002      	beq.n	8007c10 <USBH_FindInterface+0x4e>
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	d111      	bne.n	8007c34 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c14:	78ba      	ldrb	r2, [r7, #2]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d002      	beq.n	8007c20 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c1a:	78bb      	ldrb	r3, [r7, #2]
 8007c1c:	2bff      	cmp	r3, #255	@ 0xff
 8007c1e:	d109      	bne.n	8007c34 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c24:	787a      	ldrb	r2, [r7, #1]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d002      	beq.n	8007c30 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c2a:	787b      	ldrb	r3, [r7, #1]
 8007c2c:	2bff      	cmp	r3, #255	@ 0xff
 8007c2e:	d101      	bne.n	8007c34 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	e006      	b.n	8007c42 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	3301      	adds	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c3a:	7dfb      	ldrb	r3, [r7, #23]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d9d6      	bls.n	8007bee <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c40:	23ff      	movs	r3, #255	@ 0xff
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f001 fcf4 	bl	8009644 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fe0d 	bl	800987e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d102      	bne.n	8007c92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b0b      	cmp	r3, #11
 8007c9a:	f200 81bb 	bhi.w	8008014 <USBH_Process+0x3a4>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <USBH_Process+0x34>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007d07 	.word	0x08007d07
 8007cac:	08007d6f 	.word	0x08007d6f
 8007cb0:	08007faf 	.word	0x08007faf
 8007cb4:	08008015 	.word	0x08008015
 8007cb8:	08007e0f 	.word	0x08007e0f
 8007cbc:	08007f55 	.word	0x08007f55
 8007cc0:	08007e45 	.word	0x08007e45
 8007cc4:	08007e65 	.word	0x08007e65
 8007cc8:	08007e83 	.word	0x08007e83
 8007ccc:	08007ec7 	.word	0x08007ec7
 8007cd0:	08007f97 	.word	0x08007f97
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 819b 	beq.w	8008018 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007ce8:	20c8      	movs	r0, #200	@ 0xc8
 8007cea:	f001 fe12 	bl	8009912 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fd05 	bl	80096fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d04:	e188      	b.n	8008018 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d107      	bne.n	8007d20 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d1e:	e18a      	b.n	8008036 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d2a:	d914      	bls.n	8007d56 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d32:	3301      	adds	r3, #1
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d903      	bls.n	8007d4e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	220d      	movs	r2, #13
 8007d4a:	701a      	strb	r2, [r3, #0]
      break;
 8007d4c:	e173      	b.n	8008036 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e16f      	b.n	8008036 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d5c:	f103 020a 	add.w	r2, r3, #10
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d66:	200a      	movs	r0, #10
 8007d68:	f001 fdd3 	bl	8009912 <USBH_Delay>
      break;
 8007d6c:	e163      	b.n	8008036 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d7e:	2104      	movs	r1, #4
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d84:	2064      	movs	r0, #100	@ 0x64
 8007d86:	f001 fdc4 	bl	8009912 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fc90 	bl	80096b0 <USBH_LL_GetSpeed>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007da0:	2100      	movs	r1, #0
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fa9b 	bl	80092de <USBH_AllocPipe>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007db0:	2180      	movs	r1, #128	@ 0x80
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 fa93 	bl	80092de <USBH_AllocPipe>
 8007db8:	4603      	mov	r3, r0
 8007dba:	461a      	mov	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7919      	ldrb	r1, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007dd4:	9202      	str	r2, [sp, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	9201      	str	r2, [sp, #4]
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2280      	movs	r2, #128	@ 0x80
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fa4d 	bl	8009280 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7959      	ldrb	r1, [r3, #5]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dfa:	9202      	str	r2, [sp, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	9201      	str	r2, [sp, #4]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	4603      	mov	r3, r0
 8007e04:	2200      	movs	r2, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fa3a 	bl	8009280 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e0c:	e113      	b.n	8008036 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f916 	bl	8008040 <USBH_HandleEnum>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 80fd 	bne.w	800801c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d103      	bne.n	8007e3c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2208      	movs	r2, #8
 8007e38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e3a:	e0ef      	b.n	800801c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2207      	movs	r2, #7
 8007e40:	701a      	strb	r2, [r3, #0]
      break;
 8007e42:	e0eb      	b.n	800801c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 80e8 	beq.w	8008020 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e56:	2101      	movs	r1, #1
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2208      	movs	r2, #8
 8007e60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e62:	e0dd      	b.n	8008020 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fc3a 	bl	80086e6 <USBH_SetCfg>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f040 80d5 	bne.w	8008024 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e80:	e0d0      	b.n	8008024 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d016      	beq.n	8007ebe <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e90:	2101      	movs	r1, #1
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fc4a 	bl	800872c <USBH_SetFeature>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	220a      	movs	r2, #10
 8007ea8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eaa:	e0bd      	b.n	8008028 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	f040 80b9 	bne.w	8008028 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	220a      	movs	r2, #10
 8007eba:	701a      	strb	r2, [r3, #0]
      break;
 8007ebc:	e0b4      	b.n	8008028 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	701a      	strb	r2, [r3, #0]
      break;
 8007ec4:	e0b0      	b.n	8008028 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80ad 	beq.w	800802c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e016      	b.n	8007f0e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ee0:	7bfa      	ldrb	r2, [r7, #15]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	32de      	adds	r2, #222	@ 0xde
 8007ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eea:	791a      	ldrb	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d108      	bne.n	8007f08 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ef6:	7bfa      	ldrb	r2, [r7, #15]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	32de      	adds	r2, #222	@ 0xde
 8007efc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f06:	e005      	b.n	8007f14 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	73fb      	strb	r3, [r7, #15]
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0e5      	beq.n	8007ee0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d016      	beq.n	8007f4c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d109      	bne.n	8007f44 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2206      	movs	r2, #6
 8007f34:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f3c:	2103      	movs	r1, #3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f42:	e073      	b.n	800802c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	220d      	movs	r2, #13
 8007f48:	701a      	strb	r2, [r3, #0]
      break;
 8007f4a:	e06f      	b.n	800802c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	220d      	movs	r2, #13
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e06b      	b.n	800802c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d017      	beq.n	8007f8e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d103      	bne.n	8007f7e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	220b      	movs	r2, #11
 8007f7a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f7c:	e058      	b.n	8008030 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d154      	bne.n	8008030 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	220d      	movs	r2, #13
 8007f8a:	701a      	strb	r2, [r3, #0]
      break;
 8007f8c:	e050      	b.n	8008030 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	220d      	movs	r2, #13
 8007f92:	701a      	strb	r2, [r3, #0]
      break;
 8007f94:	e04c      	b.n	8008030 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d049      	beq.n	8008034 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
      }
      break;
 8007fac:	e042      	b.n	8008034 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fd4a 	bl	8007a50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fea:	2105      	movs	r1, #5
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d107      	bne.n	800800c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff fe22 	bl	8007c4e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800800a:	e014      	b.n	8008036 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 fb19 	bl	8009644 <USBH_LL_Start>
      break;
 8008012:	e010      	b.n	8008036 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008014:	bf00      	nop
 8008016:	e00e      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 8008018:	bf00      	nop
 800801a:	e00c      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 800801c:	bf00      	nop
 800801e:	e00a      	b.n	8008036 <USBH_Process+0x3c6>
    break;
 8008020:	bf00      	nop
 8008022:	e008      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 8008024:	bf00      	nop
 8008026:	e006      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <USBH_Process+0x3c6>
      break;
 8008034:	bf00      	nop
  }
  return USBH_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af04      	add	r7, sp, #16
 8008046:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008048:	2301      	movs	r3, #1
 800804a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800804c:	2301      	movs	r3, #1
 800804e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	785b      	ldrb	r3, [r3, #1]
 8008054:	2b07      	cmp	r3, #7
 8008056:	f200 81bd 	bhi.w	80083d4 <USBH_HandleEnum+0x394>
 800805a:	a201      	add	r2, pc, #4	@ (adr r2, 8008060 <USBH_HandleEnum+0x20>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008081 	.word	0x08008081
 8008064:	0800813b 	.word	0x0800813b
 8008068:	080081a5 	.word	0x080081a5
 800806c:	0800822f 	.word	0x0800822f
 8008070:	08008299 	.word	0x08008299
 8008074:	08008309 	.word	0x08008309
 8008078:	0800834f 	.word	0x0800834f
 800807c:	08008395 	.word	0x08008395
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008080:	2108      	movs	r1, #8
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa4c 	bl	8008520 <USBH_Get_DevDesc>
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d12e      	bne.n	80080f0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7919      	ldrb	r1, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80080b6:	9202      	str	r2, [sp, #8]
 80080b8:	2200      	movs	r2, #0
 80080ba:	9201      	str	r2, [sp, #4]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	4603      	mov	r3, r0
 80080c0:	2280      	movs	r2, #128	@ 0x80
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f8dc 	bl	8009280 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7959      	ldrb	r1, [r3, #5]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080dc:	9202      	str	r2, [sp, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	9201      	str	r2, [sp, #4]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	4603      	mov	r3, r0
 80080e6:	2200      	movs	r2, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 f8c9 	bl	8009280 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080ee:	e173      	b.n	80083d8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	f040 8170 	bne.w	80083d8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080fe:	3301      	adds	r3, #1
 8008100:	b2da      	uxtb	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800810e:	2b03      	cmp	r3, #3
 8008110:	d903      	bls.n	800811a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	220d      	movs	r2, #13
 8008116:	701a      	strb	r2, [r3, #0]
      break;
 8008118:	e15e      	b.n	80083d8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	795b      	ldrb	r3, [r3, #5]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f001 f8fd 	bl	8009320 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	791b      	ldrb	r3, [r3, #4]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f8f7 	bl	8009320 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	701a      	strb	r2, [r3, #0]
      break;
 8008138:	e14e      	b.n	80083d8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800813a:	2112      	movs	r1, #18
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9ef 	bl	8008520 <USBH_Get_DevDesc>
 8008142:	4603      	mov	r3, r0
 8008144:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008152:	e143      	b.n	80083dc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b03      	cmp	r3, #3
 8008158:	f040 8140 	bne.w	80083dc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008162:	3301      	adds	r3, #1
 8008164:	b2da      	uxtb	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008172:	2b03      	cmp	r3, #3
 8008174:	d903      	bls.n	800817e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	220d      	movs	r2, #13
 800817a:	701a      	strb	r2, [r3, #0]
      break;
 800817c:	e12e      	b.n	80083dc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	795b      	ldrb	r3, [r3, #5]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f8cb 	bl	8009320 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	791b      	ldrb	r3, [r3, #4]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f8c5 	bl	8009320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
      break;
 80081a2:	e11b      	b.n	80083dc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80081a4:	2101      	movs	r1, #1
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa79 	bl	800869e <USBH_SetAddress>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d130      	bne.n	8008218 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80081b6:	2002      	movs	r0, #2
 80081b8:	f001 fbab 	bl	8009912 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2203      	movs	r2, #3
 80081c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	7919      	ldrb	r1, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081de:	9202      	str	r2, [sp, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	9201      	str	r2, [sp, #4]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4603      	mov	r3, r0
 80081e8:	2280      	movs	r2, #128	@ 0x80
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 f848 	bl	8009280 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7959      	ldrb	r1, [r3, #5]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008204:	9202      	str	r2, [sp, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	4603      	mov	r3, r0
 800820e:	2200      	movs	r2, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 f835 	bl	8009280 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008216:	e0e3      	b.n	80083e0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b03      	cmp	r3, #3
 800821c:	f040 80e0 	bne.w	80083e0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	220d      	movs	r2, #13
 8008224:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	705a      	strb	r2, [r3, #1]
      break;
 800822c:	e0d8      	b.n	80083e0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800822e:	2109      	movs	r1, #9
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f9a1 	bl	8008578 <USBH_Get_CfgDesc>
 8008236:	4603      	mov	r3, r0
 8008238:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2204      	movs	r2, #4
 8008244:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008246:	e0cd      	b.n	80083e4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b03      	cmp	r3, #3
 800824c:	f040 80ca 	bne.w	80083e4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008256:	3301      	adds	r3, #1
 8008258:	b2da      	uxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008266:	2b03      	cmp	r3, #3
 8008268:	d903      	bls.n	8008272 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	220d      	movs	r2, #13
 800826e:	701a      	strb	r2, [r3, #0]
      break;
 8008270:	e0b8      	b.n	80083e4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	795b      	ldrb	r3, [r3, #5]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f851 	bl	8009320 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f84b 	bl	8009320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
      break;
 8008296:	e0a5      	b.n	80083e4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f969 	bl	8008578 <USBH_Get_CfgDesc>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2205      	movs	r2, #5
 80082b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082b6:	e097      	b.n	80083e8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	f040 8094 	bne.w	80083e8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082c6:	3301      	adds	r3, #1
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d903      	bls.n	80082e2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	220d      	movs	r2, #13
 80082de:	701a      	strb	r2, [r3, #0]
      break;
 80082e0:	e082      	b.n	80083e8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	795b      	ldrb	r3, [r3, #5]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f819 	bl	8009320 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	791b      	ldrb	r3, [r3, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f813 	bl	8009320 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
      break;
 8008306:	e06f      	b.n	80083e8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800830e:	2b00      	cmp	r3, #0
 8008310:	d019      	beq.n	8008346 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800831e:	23ff      	movs	r3, #255	@ 0xff
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f953 	bl	80085cc <USBH_Get_StringDesc>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2206      	movs	r2, #6
 8008334:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008336:	e059      	b.n	80083ec <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b03      	cmp	r3, #3
 800833c:	d156      	bne.n	80083ec <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2206      	movs	r2, #6
 8008342:	705a      	strb	r2, [r3, #1]
      break;
 8008344:	e052      	b.n	80083ec <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2206      	movs	r2, #6
 800834a:	705a      	strb	r2, [r3, #1]
      break;
 800834c:	e04e      	b.n	80083ec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008354:	2b00      	cmp	r3, #0
 8008356:	d019      	beq.n	800838c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008364:	23ff      	movs	r3, #255	@ 0xff
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f930 	bl	80085cc <USBH_Get_StringDesc>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d103      	bne.n	800837e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2207      	movs	r2, #7
 800837a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800837c:	e038      	b.n	80083f0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b03      	cmp	r3, #3
 8008382:	d135      	bne.n	80083f0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2207      	movs	r2, #7
 8008388:	705a      	strb	r2, [r3, #1]
      break;
 800838a:	e031      	b.n	80083f0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2207      	movs	r2, #7
 8008390:	705a      	strb	r2, [r3, #1]
      break;
 8008392:	e02d      	b.n	80083f0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800839a:	2b00      	cmp	r3, #0
 800839c:	d017      	beq.n	80083ce <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80083aa:	23ff      	movs	r3, #255	@ 0xff
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f90d 	bl	80085cc <USBH_Get_StringDesc>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d102      	bne.n	80083c2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083c0:	e018      	b.n	80083f4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d115      	bne.n	80083f4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73fb      	strb	r3, [r7, #15]
      break;
 80083cc:	e012      	b.n	80083f4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
      break;
 80083d2:	e00f      	b.n	80083f4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80083d4:	bf00      	nop
 80083d6:	e00e      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083d8:	bf00      	nop
 80083da:	e00c      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083dc:	bf00      	nop
 80083de:	e00a      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083e0:	bf00      	nop
 80083e2:	e008      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083e4:	bf00      	nop
 80083e6:	e006      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083e8:	bf00      	nop
 80083ea:	e004      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083ec:	bf00      	nop
 80083ee:	e002      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083f0:	bf00      	nop
 80083f2:	e000      	b.n	80083f6 <USBH_HandleEnum+0x3b6>
      break;
 80083f4:	bf00      	nop
  }
  return Status;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f804 	bl	8008442 <USBH_HandleSof>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b082      	sub	sp, #8
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b0b      	cmp	r3, #11
 8008452:	d10a      	bne.n	800846a <USBH_HandleSof+0x28>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
  }
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008472:	b480      	push	{r7}
 8008474:	b083      	sub	sp, #12
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008482:	bf00      	nop
}
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800849e:	bf00      	nop
}
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f8be 	bl	800967a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	791b      	ldrb	r3, [r3, #4]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 ff0b 	bl	8009320 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	795b      	ldrb	r3, [r3, #5]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 ff05 	bl	8009320 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af02      	add	r7, sp, #8
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800852c:	887b      	ldrh	r3, [r7, #2]
 800852e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008532:	d901      	bls.n	8008538 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008534:	2303      	movs	r3, #3
 8008536:	e01b      	b.n	8008570 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800853e:	887b      	ldrh	r3, [r7, #2]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4613      	mov	r3, r2
 8008544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f872 	bl	8008634 <USBH_GetDescriptor>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008560:	887a      	ldrh	r2, [r7, #2]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f929 	bl	80087bc <USBH_ParseDevDesc>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af02      	add	r7, sp, #8
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	331c      	adds	r3, #28
 8008588:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800858a:	887b      	ldrh	r3, [r7, #2]
 800858c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008590:	d901      	bls.n	8008596 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008592:	2303      	movs	r3, #3
 8008594:	e016      	b.n	80085c4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008596:	887b      	ldrh	r3, [r7, #2]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f846 	bl	8008634 <USBH_GetDescriptor>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d107      	bne.n	80085c2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80085b2:	887b      	ldrh	r3, [r7, #2]
 80085b4:	461a      	mov	r2, r3
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f9af 	bl	800891c <USBH_ParseCfgDesc>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	461a      	mov	r2, r3
 80085d8:	460b      	mov	r3, r1
 80085da:	72fb      	strb	r3, [r7, #11]
 80085dc:	4613      	mov	r3, r2
 80085de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80085e0:	893b      	ldrh	r3, [r7, #8]
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e6:	d802      	bhi.n	80085ee <USBH_Get_StringDesc+0x22>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e01c      	b.n	800862c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80085fa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008602:	893b      	ldrh	r3, [r7, #8]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	460b      	mov	r3, r1
 8008608:	2100      	movs	r1, #0
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f812 	bl	8008634 <USBH_GetDescriptor>
 8008610:	4603      	mov	r3, r0
 8008612:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008620:	893a      	ldrh	r2, [r7, #8]
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fb8d 	bl	8008d44 <USBH_ParseStringDesc>
  }

  return status;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	72fb      	strb	r3, [r7, #11]
 8008642:	4613      	mov	r3, r2
 8008644:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	789b      	ldrb	r3, [r3, #2]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d11c      	bne.n	8008688 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008654:	b2da      	uxtb	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2206      	movs	r2, #6
 800865e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	893a      	ldrh	r2, [r7, #8]
 8008664:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008666:	893b      	ldrh	r3, [r7, #8]
 8008668:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800866c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008670:	d104      	bne.n	800867c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f240 4209 	movw	r2, #1033	@ 0x409
 8008678:	829a      	strh	r2, [r3, #20]
 800867a:	e002      	b.n	8008682 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8b3a      	ldrh	r2, [r7, #24]
 8008686:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008688:	8b3b      	ldrh	r3, [r7, #24]
 800868a:	461a      	mov	r2, r3
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fba5 	bl	8008dde <USBH_CtlReq>
 8008694:	4603      	mov	r3, r0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	789b      	ldrb	r3, [r3, #2]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d10f      	bne.n	80086d2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2205      	movs	r2, #5
 80086bc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2100      	movs	r1, #0
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fb81 	bl	8008dde <USBH_CtlReq>
 80086dc:	4603      	mov	r3, r0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	789b      	ldrb	r3, [r3, #2]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d10e      	bne.n	8008718 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2209      	movs	r2, #9
 8008704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	887a      	ldrh	r2, [r7, #2]
 800870a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb5e 	bl	8008dde <USBH_CtlReq>
 8008722:	4603      	mov	r3, r0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	789b      	ldrb	r3, [r3, #2]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d10f      	bne.n	8008760 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2203      	movs	r2, #3
 800874a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008760:	2200      	movs	r2, #0
 8008762:	2100      	movs	r1, #0
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb3a 	bl	8008dde <USBH_CtlReq>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	789b      	ldrb	r3, [r3, #2]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10f      	bne.n	80087a8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2202      	movs	r2, #2
 800878c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	b29a      	uxth	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087a8:	2200      	movs	r2, #0
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fb16 	bl	8008dde <USBH_CtlReq>
 80087b2:	4603      	mov	r3, r0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087d0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80087dc:	2302      	movs	r3, #2
 80087de:	e094      	b.n	800890a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	785a      	ldrb	r2, [r3, #1]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3302      	adds	r3, #2
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3303      	adds	r3, #3
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	021b      	lsls	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	4313      	orrs	r3, r2
 8008804:	b29a      	uxth	r2, r3
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	791a      	ldrb	r2, [r3, #4]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	795a      	ldrb	r2, [r3, #5]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	799a      	ldrb	r2, [r3, #6]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	79da      	ldrb	r2, [r3, #7]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800883a:	2b01      	cmp	r3, #1
 800883c:	d11b      	bne.n	8008876 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	79db      	ldrb	r3, [r3, #7]
 8008842:	2b20      	cmp	r3, #32
 8008844:	dc0f      	bgt.n	8008866 <USBH_ParseDevDesc+0xaa>
 8008846:	2b08      	cmp	r3, #8
 8008848:	db0f      	blt.n	800886a <USBH_ParseDevDesc+0xae>
 800884a:	3b08      	subs	r3, #8
 800884c:	4a32      	ldr	r2, [pc, #200]	@ (8008918 <USBH_ParseDevDesc+0x15c>)
 800884e:	fa22 f303 	lsr.w	r3, r2, r3
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	bf14      	ite	ne
 800885a:	2301      	movne	r3, #1
 800885c:	2300      	moveq	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <USBH_ParseDevDesc+0xb6>
 8008864:	e001      	b.n	800886a <USBH_ParseDevDesc+0xae>
 8008866:	2b40      	cmp	r3, #64	@ 0x40
 8008868:	d003      	beq.n	8008872 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2208      	movs	r2, #8
 800886e:	71da      	strb	r2, [r3, #7]
        break;
 8008870:	e000      	b.n	8008874 <USBH_ParseDevDesc+0xb8>
        break;
 8008872:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008874:	e00e      	b.n	8008894 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800887c:	2b02      	cmp	r3, #2
 800887e:	d107      	bne.n	8008890 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	79db      	ldrb	r3, [r3, #7]
 8008884:	2b08      	cmp	r3, #8
 8008886:	d005      	beq.n	8008894 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	2208      	movs	r2, #8
 800888c:	71da      	strb	r2, [r3, #7]
 800888e:	e001      	b.n	8008894 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008890:	2303      	movs	r3, #3
 8008892:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008894:	88fb      	ldrh	r3, [r7, #6]
 8008896:	2b08      	cmp	r3, #8
 8008898:	d936      	bls.n	8008908 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	3308      	adds	r3, #8
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	3309      	adds	r3, #9
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	021b      	lsls	r3, r3, #8
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	4313      	orrs	r3, r2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	330a      	adds	r3, #10
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	330b      	adds	r3, #11
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	330c      	adds	r3, #12
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	330d      	adds	r3, #13
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	021b      	lsls	r3, r3, #8
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	7b9a      	ldrb	r2, [r3, #14]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	7bda      	ldrb	r2, [r3, #15]
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7c1a      	ldrb	r2, [r3, #16]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	7c5a      	ldrb	r2, [r3, #17]
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	371c      	adds	r7, #28
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	01000101 	.word	0x01000101

0800891c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08c      	sub	sp, #48	@ 0x30
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	4613      	mov	r3, r2
 8008928:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008930:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800894a:	2302      	movs	r3, #2
 800894c:	e0da      	b.n	8008b04 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	781a      	ldrb	r2, [r3, #0]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	785a      	ldrb	r2, [r3, #1]
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	3302      	adds	r3, #2
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3303      	adds	r3, #3
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	b29b      	uxth	r3, r3
 8008974:	4313      	orrs	r3, r2
 8008976:	b29b      	uxth	r3, r3
 8008978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897c:	bf28      	it	cs
 800897e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008982:	b29a      	uxth	r2, r3
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	791a      	ldrb	r2, [r3, #4]
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	795a      	ldrb	r2, [r3, #5]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	799a      	ldrb	r2, [r3, #6]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	79da      	ldrb	r2, [r3, #7]
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	7a1a      	ldrb	r2, [r3, #8]
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d002      	beq.n	80089be <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2209      	movs	r2, #9
 80089bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	2b09      	cmp	r3, #9
 80089c2:	f240 809d 	bls.w	8008b00 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80089c6:	2309      	movs	r3, #9
 80089c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089ce:	e081      	b.n	8008ad4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089d0:	f107 0316 	add.w	r3, r7, #22
 80089d4:	4619      	mov	r1, r3
 80089d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089d8:	f000 f9e7 	bl	8008daa <USBH_GetNextDesc>
 80089dc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d176      	bne.n	8008ad4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b09      	cmp	r3, #9
 80089ec:	d002      	beq.n	80089f4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	2209      	movs	r2, #9
 80089f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80089f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089f8:	221a      	movs	r2, #26
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	3308      	adds	r3, #8
 8008a00:	6a3a      	ldr	r2, [r7, #32]
 8008a02:	4413      	add	r3, r2
 8008a04:	3302      	adds	r3, #2
 8008a06:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a0a:	69f8      	ldr	r0, [r7, #28]
 8008a0c:	f000 f87e 	bl	8008b0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a1a:	e043      	b.n	8008aa4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a1c:	f107 0316 	add.w	r3, r7, #22
 8008a20:	4619      	mov	r1, r3
 8008a22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a24:	f000 f9c1 	bl	8008daa <USBH_GetNextDesc>
 8008a28:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d138      	bne.n	8008aa4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	795b      	ldrb	r3, [r3, #5]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d113      	bne.n	8008a62 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d003      	beq.n	8008a4a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	799b      	ldrb	r3, [r3, #6]
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d10b      	bne.n	8008a62 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	79db      	ldrb	r3, [r3, #7]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <USBH_ParseCfgDesc+0x14e>
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b09      	cmp	r3, #9
 8008a58:	d007      	beq.n	8008a6a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5c:	2209      	movs	r2, #9
 8008a5e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a60:	e003      	b.n	8008a6a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	2207      	movs	r2, #7
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e000      	b.n	8008a6c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a6a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a70:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a74:	3201      	adds	r2, #1
 8008a76:	00d2      	lsls	r2, r2, #3
 8008a78:	211a      	movs	r1, #26
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	3308      	adds	r3, #8
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	4413      	add	r3, r2
 8008a86:	3304      	adds	r3, #4
 8008a88:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a8c:	69b9      	ldr	r1, [r7, #24]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f870 	bl	8008b74 <USBH_ParseEPDesc>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	791b      	ldrb	r3, [r3, #4]
 8008aa8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d204      	bcs.n	8008aba <USBH_ParseCfgDesc+0x19e>
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	885a      	ldrh	r2, [r3, #2]
 8008ab4:	8afb      	ldrh	r3, [r7, #22]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d8b0      	bhi.n	8008a1c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d201      	bcs.n	8008aca <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e01c      	b.n	8008b04 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ace:	3301      	adds	r3, #1
 8008ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d805      	bhi.n	8008ae8 <USBH_ParseCfgDesc+0x1cc>
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	885a      	ldrh	r2, [r3, #2]
 8008ae0:	8afb      	ldrh	r3, [r7, #22]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	f63f af74 	bhi.w	80089d0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	791b      	ldrb	r3, [r3, #4]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	bf28      	it	cs
 8008af0:	2302      	movcs	r3, #2
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d201      	bcs.n	8008b00 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e001      	b.n	8008b04 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008b00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3730      	adds	r7, #48	@ 0x30
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	785a      	ldrb	r2, [r3, #1]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	789a      	ldrb	r2, [r3, #2]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	78da      	ldrb	r2, [r3, #3]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	bf28      	it	cs
 8008b40:	2302      	movcs	r3, #2
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	795a      	ldrb	r2, [r3, #5]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	799a      	ldrb	r2, [r3, #6]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	79da      	ldrb	r2, [r3, #7]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	7a1a      	ldrb	r2, [r3, #8]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	721a      	strb	r2, [r3, #8]
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	785a      	ldrb	r2, [r3, #1]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	789a      	ldrb	r2, [r3, #2]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	78da      	ldrb	r2, [r3, #3]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3305      	adds	r3, #5
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	799a      	ldrb	r2, [r3, #6]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	889b      	ldrh	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bd6:	d804      	bhi.n	8008be2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be0:	d901      	bls.n	8008be6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008be2:	2303      	movs	r3, #3
 8008be4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d136      	bne.n	8008c5e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	78db      	ldrb	r3, [r3, #3]
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d108      	bne.n	8008c0e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	889b      	ldrh	r3, [r3, #4]
 8008c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c04:	f240 8097 	bls.w	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
 8008c0c:	e093      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	78db      	ldrb	r3, [r3, #3]
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d107      	bne.n	8008c2a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	2b40      	cmp	r3, #64	@ 0x40
 8008c20:	f240 8089 	bls.w	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c24:	2303      	movs	r3, #3
 8008c26:	75fb      	strb	r3, [r7, #23]
 8008c28:	e085      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	78db      	ldrb	r3, [r3, #3]
 8008c2e:	f003 0303 	and.w	r3, r3, #3
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d005      	beq.n	8008c42 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	78db      	ldrb	r3, [r3, #3]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d10a      	bne.n	8008c58 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	799b      	ldrb	r3, [r3, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <USBH_ParseEPDesc+0xde>
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	799b      	ldrb	r3, [r3, #6]
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d970      	bls.n	8008d34 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c52:	2303      	movs	r3, #3
 8008c54:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c56:	e06d      	b.n	8008d34 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	75fb      	strb	r3, [r7, #23]
 8008c5c:	e06b      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d13c      	bne.n	8008ce2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	78db      	ldrb	r3, [r3, #3]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d005      	beq.n	8008c80 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	78db      	ldrb	r3, [r3, #3]
 8008c78:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d106      	bne.n	8008c8e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	889b      	ldrh	r3, [r3, #4]
 8008c84:	2b40      	cmp	r3, #64	@ 0x40
 8008c86:	d956      	bls.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c8c:	e053      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	78db      	ldrb	r3, [r3, #3]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d10e      	bne.n	8008cb8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	799b      	ldrb	r3, [r3, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d007      	beq.n	8008cb2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008ca6:	2b10      	cmp	r3, #16
 8008ca8:	d803      	bhi.n	8008cb2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008cae:	2b40      	cmp	r3, #64	@ 0x40
 8008cb0:	d941      	bls.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	75fb      	strb	r3, [r7, #23]
 8008cb6:	e03e      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	78db      	ldrb	r3, [r3, #3]
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d10b      	bne.n	8008cdc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	799b      	ldrb	r3, [r3, #6]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <USBH_ParseEPDesc+0x162>
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	889b      	ldrh	r3, [r3, #4]
 8008cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cd4:	d32f      	bcc.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	75fb      	strb	r3, [r7, #23]
 8008cda:	e02c      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	75fb      	strb	r3, [r7, #23]
 8008ce0:	e029      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d120      	bne.n	8008d2e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	78db      	ldrb	r3, [r3, #3]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	889b      	ldrh	r3, [r3, #4]
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	d01a      	beq.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d00:	2303      	movs	r3, #3
 8008d02:	75fb      	strb	r3, [r7, #23]
 8008d04:	e017      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	78db      	ldrb	r3, [r3, #3]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d10a      	bne.n	8008d28 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	799b      	ldrb	r3, [r3, #6]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <USBH_ParseEPDesc+0x1ae>
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	889b      	ldrh	r3, [r3, #4]
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d909      	bls.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d22:	2303      	movs	r3, #3
 8008d24:	75fb      	strb	r3, [r7, #23]
 8008d26:	e006      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
 8008d2c:	e003      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	75fb      	strb	r3, [r7, #23]
 8008d32:	e000      	b.n	8008d36 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d34:	bf00      	nop
  }

  return status;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d120      	bne.n	8008d9e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	1e9a      	subs	r2, r3, #2
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	4293      	cmp	r3, r2
 8008d66:	bf28      	it	cs
 8008d68:	4613      	movcs	r3, r2
 8008d6a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	3302      	adds	r3, #2
 8008d70:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d72:	2300      	movs	r3, #0
 8008d74:	82fb      	strh	r3, [r7, #22]
 8008d76:	e00b      	b.n	8008d90 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d78:	8afb      	ldrh	r3, [r7, #22]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d8a:	8afb      	ldrh	r3, [r7, #22]
 8008d8c:	3302      	adds	r3, #2
 8008d8e:	82fb      	strh	r3, [r7, #22]
 8008d90:	8afa      	ldrh	r2, [r7, #22]
 8008d92:	8abb      	ldrh	r3, [r7, #20]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d3ef      	bcc.n	8008d78 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
  }
}
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	60f8      	str	r0, [r7, #12]
 8008de6:	60b9      	str	r1, [r7, #8]
 8008de8:	4613      	mov	r3, r2
 8008dea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	789b      	ldrb	r3, [r3, #2]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d002      	beq.n	8008dfe <USBH_CtlReq+0x20>
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d00f      	beq.n	8008e1c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008dfc:	e027      	b.n	8008e4e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2202      	movs	r2, #2
 8008e14:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e16:	2301      	movs	r3, #1
 8008e18:	75fb      	strb	r3, [r7, #23]
      break;
 8008e1a:	e018      	b.n	8008e4e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f81b 	bl	8008e58 <USBH_HandleControl>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <USBH_CtlReq+0x54>
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d106      	bne.n	8008e40 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	761a      	strb	r2, [r3, #24]
      break;
 8008e3e:	e005      	b.n	8008e4c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d102      	bne.n	8008e4c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	709a      	strb	r2, [r3, #2]
      break;
 8008e4c:	bf00      	nop
  }
  return status;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7e1b      	ldrb	r3, [r3, #24]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	2b0a      	cmp	r3, #10
 8008e70:	f200 8156 	bhi.w	8009120 <USBH_HandleControl+0x2c8>
 8008e74:	a201      	add	r2, pc, #4	@ (adr r2, 8008e7c <USBH_HandleControl+0x24>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	08008ec3 	.word	0x08008ec3
 8008e84:	08008f2d 	.word	0x08008f2d
 8008e88:	08008f53 	.word	0x08008f53
 8008e8c:	08008f8b 	.word	0x08008f8b
 8008e90:	08008fb5 	.word	0x08008fb5
 8008e94:	08009007 	.word	0x08009007
 8008e98:	08009029 	.word	0x08009029
 8008e9c:	08009065 	.word	0x08009065
 8008ea0:	0800908b 	.word	0x0800908b
 8008ea4:	080090c9 	.word	0x080090c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f103 0110 	add.w	r1, r3, #16
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	795b      	ldrb	r3, [r3, #5]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f943 	bl	8009140 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	761a      	strb	r2, [r3, #24]
      break;
 8008ec0:	e139      	b.n	8009136 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	795b      	ldrb	r3, [r3, #5]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fcc5 	bl	8009858 <USBH_LL_GetURBState>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d11e      	bne.n	8008f16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	7c1b      	ldrb	r3, [r3, #16]
 8008edc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ee0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8adb      	ldrh	r3, [r3, #22]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008eea:	7b7b      	ldrb	r3, [r7, #13]
 8008eec:	2b80      	cmp	r3, #128	@ 0x80
 8008eee:	d103      	bne.n	8008ef8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ef6:	e115      	b.n	8009124 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2205      	movs	r2, #5
 8008efc:	761a      	strb	r2, [r3, #24]
      break;
 8008efe:	e111      	b.n	8009124 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f00:	7b7b      	ldrb	r3, [r7, #13]
 8008f02:	2b80      	cmp	r3, #128	@ 0x80
 8008f04:	d103      	bne.n	8008f0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2209      	movs	r2, #9
 8008f0a:	761a      	strb	r2, [r3, #24]
      break;
 8008f0c:	e10a      	b.n	8009124 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2207      	movs	r2, #7
 8008f12:	761a      	strb	r2, [r3, #24]
      break;
 8008f14:	e106      	b.n	8009124 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d003      	beq.n	8008f24 <USBH_HandleControl+0xcc>
 8008f1c:	7bbb      	ldrb	r3, [r7, #14]
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	f040 8100 	bne.w	8009124 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	220b      	movs	r2, #11
 8008f28:	761a      	strb	r2, [r3, #24]
      break;
 8008f2a:	e0fb      	b.n	8009124 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6899      	ldr	r1, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	899a      	ldrh	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f93a 	bl	80091be <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	761a      	strb	r2, [r3, #24]
      break;
 8008f50:	e0f1      	b.n	8009136 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	791b      	ldrb	r3, [r3, #4]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fc7d 	bl	8009858 <USBH_LL_GetURBState>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d102      	bne.n	8008f6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2209      	movs	r2, #9
 8008f6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b05      	cmp	r3, #5
 8008f72:	d102      	bne.n	8008f7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f78:	e0d6      	b.n	8009128 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	f040 80d3 	bne.w	8009128 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	220b      	movs	r2, #11
 8008f86:	761a      	strb	r2, [r3, #24]
      break;
 8008f88:	e0ce      	b.n	8009128 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6899      	ldr	r1, [r3, #8]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	899a      	ldrh	r2, [r3, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	2001      	movs	r0, #1
 8008f98:	9000      	str	r0, [sp, #0]
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8ea 	bl	8009174 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2206      	movs	r2, #6
 8008fb0:	761a      	strb	r2, [r3, #24]
      break;
 8008fb2:	e0c0      	b.n	8009136 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	795b      	ldrb	r3, [r3, #5]
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fc4c 	bl	8009858 <USBH_LL_GetURBState>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d103      	bne.n	8008fd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2207      	movs	r2, #7
 8008fce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fd0:	e0ac      	b.n	800912c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b05      	cmp	r3, #5
 8008fd6:	d105      	bne.n	8008fe4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	220c      	movs	r2, #12
 8008fdc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe2:	e0a3      	b.n	800912c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2205      	movs	r2, #5
 8008fee:	761a      	strb	r2, [r3, #24]
      break;
 8008ff0:	e09c      	b.n	800912c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	f040 8099 	bne.w	800912c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	220b      	movs	r2, #11
 8008ffe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009000:	2302      	movs	r3, #2
 8009002:	73fb      	strb	r3, [r7, #15]
      break;
 8009004:	e092      	b.n	800912c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f8d5 	bl	80091be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800901a:	b29a      	uxth	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2208      	movs	r2, #8
 8009024:	761a      	strb	r2, [r3, #24]

      break;
 8009026:	e086      	b.n	8009136 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fc12 	bl	8009858 <USBH_LL_GetURBState>
 8009034:	4603      	mov	r3, r0
 8009036:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d105      	bne.n	800904a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220d      	movs	r2, #13
 8009042:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009048:	e072      	b.n	8009130 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b04      	cmp	r3, #4
 800904e:	d103      	bne.n	8009058 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	220b      	movs	r2, #11
 8009054:	761a      	strb	r2, [r3, #24]
      break;
 8009056:	e06b      	b.n	8009130 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009058:	7bbb      	ldrb	r3, [r7, #14]
 800905a:	2b05      	cmp	r3, #5
 800905c:	d168      	bne.n	8009130 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800905e:	2303      	movs	r3, #3
 8009060:	73fb      	strb	r3, [r7, #15]
      break;
 8009062:	e065      	b.n	8009130 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	795b      	ldrb	r3, [r3, #5]
 8009068:	2201      	movs	r2, #1
 800906a:	9200      	str	r2, [sp, #0]
 800906c:	2200      	movs	r2, #0
 800906e:	2100      	movs	r1, #0
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f87f 	bl	8009174 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	220a      	movs	r2, #10
 8009086:	761a      	strb	r2, [r3, #24]
      break;
 8009088:	e055      	b.n	8009136 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	795b      	ldrb	r3, [r3, #5]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fbe1 	bl	8009858 <USBH_LL_GetURBState>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d105      	bne.n	80090ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	220d      	movs	r2, #13
 80090a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090aa:	e043      	b.n	8009134 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d103      	bne.n	80090ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2209      	movs	r2, #9
 80090b6:	761a      	strb	r2, [r3, #24]
      break;
 80090b8:	e03c      	b.n	8009134 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b04      	cmp	r3, #4
 80090be:	d139      	bne.n	8009134 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	220b      	movs	r2, #11
 80090c4:	761a      	strb	r2, [r3, #24]
      break;
 80090c6:	e035      	b.n	8009134 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7e5b      	ldrb	r3, [r3, #25]
 80090cc:	3301      	adds	r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	765a      	strb	r2, [r3, #25]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7e5b      	ldrb	r3, [r3, #25]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d806      	bhi.n	80090ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090e8:	e025      	b.n	8009136 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090f0:	2106      	movs	r1, #6
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	795b      	ldrb	r3, [r3, #5]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f90c 	bl	8009320 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	791b      	ldrb	r3, [r3, #4]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f906 	bl	8009320 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	73fb      	strb	r3, [r7, #15]
      break;
 800911e:	e00a      	b.n	8009136 <USBH_HandleControl+0x2de>

    default:
      break;
 8009120:	bf00      	nop
 8009122:	e008      	b.n	8009136 <USBH_HandleControl+0x2de>
      break;
 8009124:	bf00      	nop
 8009126:	e006      	b.n	8009136 <USBH_HandleControl+0x2de>
      break;
 8009128:	bf00      	nop
 800912a:	e004      	b.n	8009136 <USBH_HandleControl+0x2de>
      break;
 800912c:	bf00      	nop
 800912e:	e002      	b.n	8009136 <USBH_HandleControl+0x2de>
      break;
 8009130:	bf00      	nop
 8009132:	e000      	b.n	8009136 <USBH_HandleControl+0x2de>
      break;
 8009134:	bf00      	nop
  }

  return status;
 8009136:	7bfb      	ldrb	r3, [r7, #15]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af04      	add	r7, sp, #16
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800914e:	79f9      	ldrb	r1, [r7, #7]
 8009150:	2300      	movs	r3, #0
 8009152:	9303      	str	r3, [sp, #12]
 8009154:	2308      	movs	r3, #8
 8009156:	9302      	str	r3, [sp, #8]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2300      	movs	r3, #0
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	2300      	movs	r3, #0
 8009162:	2200      	movs	r2, #0
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fb46 	bl	80097f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af04      	add	r7, sp, #16
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4611      	mov	r1, r2
 8009180:	461a      	mov	r2, r3
 8009182:	460b      	mov	r3, r1
 8009184:	80fb      	strh	r3, [r7, #6]
 8009186:	4613      	mov	r3, r2
 8009188:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009198:	7979      	ldrb	r1, [r7, #5]
 800919a:	7e3b      	ldrb	r3, [r7, #24]
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	9302      	str	r3, [sp, #8]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	2301      	movs	r3, #1
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fb21 	bl	80097f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b088      	sub	sp, #32
 80091c2:	af04      	add	r7, sp, #16
 80091c4:	60f8      	str	r0, [r7, #12]
 80091c6:	60b9      	str	r1, [r7, #8]
 80091c8:	4611      	mov	r1, r2
 80091ca:	461a      	mov	r2, r3
 80091cc:	460b      	mov	r3, r1
 80091ce:	80fb      	strh	r3, [r7, #6]
 80091d0:	4613      	mov	r3, r2
 80091d2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091d4:	7979      	ldrb	r1, [r7, #5]
 80091d6:	2300      	movs	r3, #0
 80091d8:	9303      	str	r3, [sp, #12]
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	2301      	movs	r3, #1
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	2300      	movs	r3, #0
 80091e8:	2201      	movs	r2, #1
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 fb03 	bl	80097f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091f0:	2300      	movs	r3, #0

}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b088      	sub	sp, #32
 80091fe:	af04      	add	r7, sp, #16
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	4611      	mov	r1, r2
 8009206:	461a      	mov	r2, r3
 8009208:	460b      	mov	r3, r1
 800920a:	80fb      	strh	r3, [r7, #6]
 800920c:	4613      	mov	r3, r2
 800920e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800921e:	7979      	ldrb	r1, [r7, #5]
 8009220:	7e3b      	ldrb	r3, [r7, #24]
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	2301      	movs	r3, #1
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2302      	movs	r3, #2
 8009232:	2200      	movs	r2, #0
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fade 	bl	80097f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af04      	add	r7, sp, #16
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	4611      	mov	r1, r2
 8009250:	461a      	mov	r2, r3
 8009252:	460b      	mov	r3, r1
 8009254:	80fb      	strh	r3, [r7, #6]
 8009256:	4613      	mov	r3, r2
 8009258:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800925a:	7979      	ldrb	r1, [r7, #5]
 800925c:	2300      	movs	r3, #0
 800925e:	9303      	str	r3, [sp, #12]
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	9302      	str	r3, [sp, #8]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	9301      	str	r3, [sp, #4]
 8009268:	2301      	movs	r3, #1
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	2302      	movs	r3, #2
 800926e:	2201      	movs	r2, #1
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 fac0 	bl	80097f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af04      	add	r7, sp, #16
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	461a      	mov	r2, r3
 800928e:	4603      	mov	r3, r0
 8009290:	70fb      	strb	r3, [r7, #3]
 8009292:	460b      	mov	r3, r1
 8009294:	70bb      	strb	r3, [r7, #2]
 8009296:	4613      	mov	r3, r2
 8009298:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800929a:	7878      	ldrb	r0, [r7, #1]
 800929c:	78ba      	ldrb	r2, [r7, #2]
 800929e:	78f9      	ldrb	r1, [r7, #3]
 80092a0:	8b3b      	ldrh	r3, [r7, #24]
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	7d3b      	ldrb	r3, [r7, #20]
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	7c3b      	ldrb	r3, [r7, #16]
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	4603      	mov	r3, r0
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa53 	bl	800975a <USBH_LL_OpenPipe>

  return USBH_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b082      	sub	sp, #8
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fa72 	bl	80097b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f836 	bl	800935c <USBH_GetFreePipe>
 80092f0:	4603      	mov	r3, r0
 80092f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00a      	beq.n	8009314 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	89fb      	ldrh	r3, [r7, #14]
 8009302:	f003 030f 	and.w	r3, r3, #15
 8009306:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	33e0      	adds	r3, #224	@ 0xe0
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	440b      	add	r3, r1
 8009312:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	b2db      	uxtb	r3, r3
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	2b0f      	cmp	r3, #15
 8009330:	d80d      	bhi.n	800934e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	33e0      	adds	r3, #224	@ 0xe0
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	78fb      	ldrb	r3, [r7, #3]
 8009340:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009344:	6879      	ldr	r1, [r7, #4]
 8009346:	33e0      	adds	r3, #224	@ 0xe0
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]
 800936c:	e00f      	b.n	800938e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	33e0      	adds	r3, #224	@ 0xe0
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d102      	bne.n	8009388 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	b29b      	uxth	r3, r3
 8009386:	e007      	b.n	8009398 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	3301      	adds	r3, #1
 800938c:	73fb      	strb	r3, [r7, #15]
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b0f      	cmp	r3, #15
 8009392:	d9ec      	bls.n	800936e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80093a8:	2201      	movs	r2, #1
 80093aa:	490e      	ldr	r1, [pc, #56]	@ (80093e4 <MX_USB_HOST_Init+0x40>)
 80093ac:	480e      	ldr	r0, [pc, #56]	@ (80093e8 <MX_USB_HOST_Init+0x44>)
 80093ae:	f7fe fb15 	bl	80079dc <USBH_Init>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80093b8:	f7f7 fb0c 	bl	80009d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80093bc:	490b      	ldr	r1, [pc, #44]	@ (80093ec <MX_USB_HOST_Init+0x48>)
 80093be:	480a      	ldr	r0, [pc, #40]	@ (80093e8 <MX_USB_HOST_Init+0x44>)
 80093c0:	f7fe fbb9 	bl	8007b36 <USBH_RegisterClass>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093ca:	f7f7 fb03 	bl	80009d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093ce:	4806      	ldr	r0, [pc, #24]	@ (80093e8 <MX_USB_HOST_Init+0x44>)
 80093d0:	f7fe fc3d 	bl	8007c4e <USBH_Start>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093da:	f7f7 fafb 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80093de:	bf00      	nop
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	08009405 	.word	0x08009405
 80093e8:	200001dc 	.word	0x200001dc
 80093ec:	2000000c 	.word	0x2000000c

080093f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093f4:	4802      	ldr	r0, [pc, #8]	@ (8009400 <MX_USB_HOST_Process+0x10>)
 80093f6:	f7fe fc3b 	bl	8007c70 <USBH_Process>
}
 80093fa:	bf00      	nop
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200001dc 	.word	0x200001dc

08009404 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	3b01      	subs	r3, #1
 8009414:	2b04      	cmp	r3, #4
 8009416:	d819      	bhi.n	800944c <USBH_UserProcess+0x48>
 8009418:	a201      	add	r2, pc, #4	@ (adr r2, 8009420 <USBH_UserProcess+0x1c>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	0800944d 	.word	0x0800944d
 8009424:	0800943d 	.word	0x0800943d
 8009428:	0800944d 	.word	0x0800944d
 800942c:	08009445 	.word	0x08009445
 8009430:	08009435 	.word	0x08009435
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009434:	4b09      	ldr	r3, [pc, #36]	@ (800945c <USBH_UserProcess+0x58>)
 8009436:	2203      	movs	r2, #3
 8009438:	701a      	strb	r2, [r3, #0]
  break;
 800943a:	e008      	b.n	800944e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800943c:	4b07      	ldr	r3, [pc, #28]	@ (800945c <USBH_UserProcess+0x58>)
 800943e:	2202      	movs	r2, #2
 8009440:	701a      	strb	r2, [r3, #0]
  break;
 8009442:	e004      	b.n	800944e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009444:	4b05      	ldr	r3, [pc, #20]	@ (800945c <USBH_UserProcess+0x58>)
 8009446:	2201      	movs	r2, #1
 8009448:	701a      	strb	r2, [r3, #0]
  break;
 800944a:	e000      	b.n	800944e <USBH_UserProcess+0x4a>

  default:
  break;
 800944c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800944e:	bf00      	nop
 8009450:	370c      	adds	r7, #12
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	200005b4 	.word	0x200005b4

08009460 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08a      	sub	sp, #40	@ 0x28
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009468:	f107 0314 	add.w	r3, r7, #20
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	605a      	str	r2, [r3, #4]
 8009472:	609a      	str	r2, [r3, #8]
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009480:	d147      	bne.n	8009512 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	613b      	str	r3, [r7, #16]
 8009486:	4b25      	ldr	r3, [pc, #148]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948a:	4a24      	ldr	r2, [pc, #144]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 800948c:	f043 0301 	orr.w	r3, r3, #1
 8009490:	6313      	str	r3, [r2, #48]	@ 0x30
 8009492:	4b22      	ldr	r3, [pc, #136]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	613b      	str	r3, [r7, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800949e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80094ac:	f107 0314 	add.w	r3, r7, #20
 80094b0:	4619      	mov	r1, r3
 80094b2:	481b      	ldr	r0, [pc, #108]	@ (8009520 <HAL_HCD_MspInit+0xc0>)
 80094b4:	f7f7 ff0c 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80094b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80094bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094be:	2302      	movs	r3, #2
 80094c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094c6:	2300      	movs	r3, #0
 80094c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094ca:	230a      	movs	r3, #10
 80094cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ce:	f107 0314 	add.w	r3, r7, #20
 80094d2:	4619      	mov	r1, r3
 80094d4:	4812      	ldr	r0, [pc, #72]	@ (8009520 <HAL_HCD_MspInit+0xc0>)
 80094d6:	f7f7 fefb 	bl	80012d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094da:	4b10      	ldr	r3, [pc, #64]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 80094dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094de:	4a0f      	ldr	r2, [pc, #60]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 80094e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	4b0c      	ldr	r3, [pc, #48]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 80094ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ee:	4a0b      	ldr	r2, [pc, #44]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 80094f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80094f6:	4b09      	ldr	r3, [pc, #36]	@ (800951c <HAL_HCD_MspInit+0xbc>)
 80094f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	2043      	movs	r0, #67	@ 0x43
 8009508:	f7f7 fe19 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800950c:	2043      	movs	r0, #67	@ 0x43
 800950e:	f7f7 fe32 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009512:	bf00      	nop
 8009514:	3728      	adds	r7, #40	@ 0x28
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800
 8009520:	40020000 	.word	0x40020000

08009524 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009532:	4618      	mov	r0, r3
 8009534:	f7fe ff73 	bl	800841e <USBH_LL_IncTimer>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe ffab 	bl	80084aa <USBH_LL_Connect>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe ffb4 	bl	80084d8 <USBH_LL_Disconnect>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	460b      	mov	r3, r1
 8009582:	70fb      	strb	r3, [r7, #3]
 8009584:	4613      	mov	r3, r2
 8009586:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe ff65 	bl	8008472 <USBH_LL_PortEnabled>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe ff65 	bl	800848e <USBH_LL_PortDisabled>
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d12a      	bne.n	8009634 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80095de:	4a18      	ldr	r2, [pc, #96]	@ (8009640 <USBH_LL_Init+0x74>)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a15      	ldr	r2, [pc, #84]	@ (8009640 <USBH_LL_Init+0x74>)
 80095ea:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095ee:	4b14      	ldr	r3, [pc, #80]	@ (8009640 <USBH_LL_Init+0x74>)
 80095f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095f6:	4b12      	ldr	r3, [pc, #72]	@ (8009640 <USBH_LL_Init+0x74>)
 80095f8:	2208      	movs	r2, #8
 80095fa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095fc:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <USBH_LL_Init+0x74>)
 80095fe:	2201      	movs	r2, #1
 8009600:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009602:	4b0f      	ldr	r3, [pc, #60]	@ (8009640 <USBH_LL_Init+0x74>)
 8009604:	2200      	movs	r2, #0
 8009606:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009608:	4b0d      	ldr	r3, [pc, #52]	@ (8009640 <USBH_LL_Init+0x74>)
 800960a:	2202      	movs	r2, #2
 800960c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800960e:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <USBH_LL_Init+0x74>)
 8009610:	2200      	movs	r2, #0
 8009612:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009614:	480a      	ldr	r0, [pc, #40]	@ (8009640 <USBH_LL_Init+0x74>)
 8009616:	f7f8 f82a 	bl	800166e <HAL_HCD_Init>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009620:	f7f7 f9d8 	bl	80009d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009624:	4806      	ldr	r0, [pc, #24]	@ (8009640 <USBH_LL_Init+0x74>)
 8009626:	f7f8 fc8b 	bl	8001f40 <HAL_HCD_GetCurrentFrame>
 800962a:	4603      	mov	r3, r0
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fe fee6 	bl	8008400 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	200005b8 	.word	0x200005b8

08009644 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800965a:	4618      	mov	r0, r3
 800965c:	f7f8 fbf8 	bl	8001e50 <HAL_HCD_Start>
 8009660:	4603      	mov	r3, r0
 8009662:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 f95e 	bl	8009928 <USBH_Get_USB_Status>
 800966c:	4603      	mov	r3, r0
 800966e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009670:	7bbb      	ldrb	r3, [r7, #14]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009690:	4618      	mov	r0, r3
 8009692:	f7f8 fc00 	bl	8001e96 <HAL_HCD_Stop>
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 f943 	bl	8009928 <USBH_Get_USB_Status>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80096b8:	2301      	movs	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f8 fc4a 	bl	8001f5c <HAL_HCD_GetCurrentSpeed>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	d00c      	beq.n	80096e8 <USBH_LL_GetSpeed+0x38>
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d80d      	bhi.n	80096ee <USBH_LL_GetSpeed+0x3e>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <USBH_LL_GetSpeed+0x2c>
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d003      	beq.n	80096e2 <USBH_LL_GetSpeed+0x32>
 80096da:	e008      	b.n	80096ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
    break;
 80096e0:	e008      	b.n	80096f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80096e2:	2301      	movs	r3, #1
 80096e4:	73fb      	strb	r3, [r7, #15]
    break;
 80096e6:	e005      	b.n	80096f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096e8:	2302      	movs	r3, #2
 80096ea:	73fb      	strb	r3, [r7, #15]
    break;
 80096ec:	e002      	b.n	80096f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]
    break;
 80096f2:	bf00      	nop
  }
  return  speed;
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b084      	sub	sp, #16
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009714:	4618      	mov	r0, r3
 8009716:	f7f8 fbdb 	bl	8001ed0 <HAL_HCD_ResetPort>
 800971a:	4603      	mov	r3, r0
 800971c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f901 	bl	8009928 <USBH_Get_USB_Status>
 8009726:	4603      	mov	r3, r0
 8009728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800972a:	7bbb      	ldrb	r3, [r7, #14]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	460b      	mov	r3, r1
 800973e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009746:	78fa      	ldrb	r2, [r7, #3]
 8009748:	4611      	mov	r1, r2
 800974a:	4618      	mov	r0, r3
 800974c:	f7f8 fbe3 	bl	8001f16 <HAL_HCD_HC_GetXferCount>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800975a:	b590      	push	{r4, r7, lr}
 800975c:	b089      	sub	sp, #36	@ 0x24
 800975e:	af04      	add	r7, sp, #16
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	4608      	mov	r0, r1
 8009764:	4611      	mov	r1, r2
 8009766:	461a      	mov	r2, r3
 8009768:	4603      	mov	r3, r0
 800976a:	70fb      	strb	r3, [r7, #3]
 800976c:	460b      	mov	r3, r1
 800976e:	70bb      	strb	r3, [r7, #2]
 8009770:	4613      	mov	r3, r2
 8009772:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009782:	787c      	ldrb	r4, [r7, #1]
 8009784:	78ba      	ldrb	r2, [r7, #2]
 8009786:	78f9      	ldrb	r1, [r7, #3]
 8009788:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4623      	mov	r3, r4
 800979a:	f7f7 ffcf 	bl	800173c <HAL_HCD_HC_Init>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f8bf 	bl	8009928 <USBH_Get_USB_Status>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd90      	pop	{r4, r7, pc}

080097b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097d2:	78fa      	ldrb	r2, [r7, #3]
 80097d4:	4611      	mov	r1, r2
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7f8 f868 	bl	80018ac <HAL_HCD_HC_Halt>
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f8a0 	bl	8009928 <USBH_Get_USB_Status>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097f6:	b590      	push	{r4, r7, lr}
 80097f8:	b089      	sub	sp, #36	@ 0x24
 80097fa:	af04      	add	r7, sp, #16
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	461a      	mov	r2, r3
 8009804:	4603      	mov	r3, r0
 8009806:	70fb      	strb	r3, [r7, #3]
 8009808:	460b      	mov	r3, r1
 800980a:	70bb      	strb	r3, [r7, #2]
 800980c:	4613      	mov	r3, r2
 800980e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800981e:	787c      	ldrb	r4, [r7, #1]
 8009820:	78ba      	ldrb	r2, [r7, #2]
 8009822:	78f9      	ldrb	r1, [r7, #3]
 8009824:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4623      	mov	r3, r4
 800983a:	f7f8 f85b 	bl	80018f4 <HAL_HCD_HC_SubmitRequest>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f86f 	bl	8009928 <USBH_Get_USB_Status>
 800984a:	4603      	mov	r3, r0
 800984c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800984e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	bd90      	pop	{r4, r7, pc}

08009858 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	4611      	mov	r1, r2
 800986e:	4618      	mov	r0, r3
 8009870:	f7f8 fb3c 	bl	8001eec <HAL_HCD_HC_GetURBState>
 8009874:	4603      	mov	r3, r0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009890:	2b01      	cmp	r3, #1
 8009892:	d103      	bne.n	800989c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f872 	bl	8009980 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800989c:	20c8      	movs	r0, #200	@ 0xc8
 800989e:	f7f7 fb4f 	bl	8000f40 <HAL_Delay>
  return USBH_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
 80098b8:	4613      	mov	r3, r2
 80098ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	4613      	mov	r3, r2
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	440b      	add	r3, r1
 80098d2:	3317      	adds	r3, #23
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	68f9      	ldr	r1, [r7, #12]
 80098de:	4613      	mov	r3, r2
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	333c      	adds	r3, #60	@ 0x3c
 80098ea:	78ba      	ldrb	r2, [r7, #2]
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e009      	b.n	8009904 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	68f9      	ldr	r1, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	333d      	adds	r3, #61	@ 0x3d
 8009900:	78ba      	ldrb	r2, [r7, #2]
 8009902:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7f7 fb10 	bl	8000f40 <HAL_Delay>
}
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	2b03      	cmp	r3, #3
 800993a:	d817      	bhi.n	800996c <USBH_Get_USB_Status+0x44>
 800993c:	a201      	add	r2, pc, #4	@ (adr r2, 8009944 <USBH_Get_USB_Status+0x1c>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009955 	.word	0x08009955
 8009948:	0800995b 	.word	0x0800995b
 800994c:	08009961 	.word	0x08009961
 8009950:	08009967 	.word	0x08009967
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
    break;
 8009958:	e00b      	b.n	8009972 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800995a:	2302      	movs	r3, #2
 800995c:	73fb      	strb	r3, [r7, #15]
    break;
 800995e:	e008      	b.n	8009972 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009960:	2301      	movs	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
    break;
 8009964:	e005      	b.n	8009972 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009966:	2302      	movs	r3, #2
 8009968:	73fb      	strb	r3, [r7, #15]
    break;
 800996a:	e002      	b.n	8009972 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800996c:	2302      	movs	r3, #2
 800996e:	73fb      	strb	r3, [r7, #15]
    break;
 8009970:	bf00      	nop
  }
  return usb_status;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
 8009998:	e001      	b.n	800999e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800999a:	2301      	movs	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	461a      	mov	r2, r3
 80099a2:	2101      	movs	r1, #1
 80099a4:	4803      	ldr	r0, [pc, #12]	@ (80099b4 <MX_DriverVbusFS+0x34>)
 80099a6:	f7f7 fe2f 	bl	8001608 <HAL_GPIO_WritePin>
}
 80099aa:	bf00      	nop
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	40020800 	.word	0x40020800

080099b8 <malloc>:
 80099b8:	4b02      	ldr	r3, [pc, #8]	@ (80099c4 <malloc+0xc>)
 80099ba:	4601      	mov	r1, r0
 80099bc:	6818      	ldr	r0, [r3, #0]
 80099be:	f000 b82d 	b.w	8009a1c <_malloc_r>
 80099c2:	bf00      	nop
 80099c4:	2000002c 	.word	0x2000002c

080099c8 <free>:
 80099c8:	4b02      	ldr	r3, [pc, #8]	@ (80099d4 <free+0xc>)
 80099ca:	4601      	mov	r1, r0
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	f000 b8f5 	b.w	8009bbc <_free_r>
 80099d2:	bf00      	nop
 80099d4:	2000002c 	.word	0x2000002c

080099d8 <sbrk_aligned>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	4e0f      	ldr	r6, [pc, #60]	@ (8009a18 <sbrk_aligned+0x40>)
 80099dc:	460c      	mov	r4, r1
 80099de:	6831      	ldr	r1, [r6, #0]
 80099e0:	4605      	mov	r5, r0
 80099e2:	b911      	cbnz	r1, 80099ea <sbrk_aligned+0x12>
 80099e4:	f000 f8ae 	bl	8009b44 <_sbrk_r>
 80099e8:	6030      	str	r0, [r6, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	4628      	mov	r0, r5
 80099ee:	f000 f8a9 	bl	8009b44 <_sbrk_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d103      	bne.n	80099fe <sbrk_aligned+0x26>
 80099f6:	f04f 34ff 	mov.w	r4, #4294967295
 80099fa:	4620      	mov	r0, r4
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	1cc4      	adds	r4, r0, #3
 8009a00:	f024 0403 	bic.w	r4, r4, #3
 8009a04:	42a0      	cmp	r0, r4
 8009a06:	d0f8      	beq.n	80099fa <sbrk_aligned+0x22>
 8009a08:	1a21      	subs	r1, r4, r0
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f89a 	bl	8009b44 <_sbrk_r>
 8009a10:	3001      	adds	r0, #1
 8009a12:	d1f2      	bne.n	80099fa <sbrk_aligned+0x22>
 8009a14:	e7ef      	b.n	80099f6 <sbrk_aligned+0x1e>
 8009a16:	bf00      	nop
 8009a18:	20000998 	.word	0x20000998

08009a1c <_malloc_r>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	1ccd      	adds	r5, r1, #3
 8009a22:	f025 0503 	bic.w	r5, r5, #3
 8009a26:	3508      	adds	r5, #8
 8009a28:	2d0c      	cmp	r5, #12
 8009a2a:	bf38      	it	cc
 8009a2c:	250c      	movcc	r5, #12
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	4606      	mov	r6, r0
 8009a32:	db01      	blt.n	8009a38 <_malloc_r+0x1c>
 8009a34:	42a9      	cmp	r1, r5
 8009a36:	d904      	bls.n	8009a42 <_malloc_r+0x26>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	6033      	str	r3, [r6, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b18 <_malloc_r+0xfc>
 8009a46:	f000 f869 	bl	8009b1c <__malloc_lock>
 8009a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a4e:	461c      	mov	r4, r3
 8009a50:	bb44      	cbnz	r4, 8009aa4 <_malloc_r+0x88>
 8009a52:	4629      	mov	r1, r5
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff ffbf 	bl	80099d8 <sbrk_aligned>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	d158      	bne.n	8009b12 <_malloc_r+0xf6>
 8009a60:	f8d8 4000 	ldr.w	r4, [r8]
 8009a64:	4627      	mov	r7, r4
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	d143      	bne.n	8009af2 <_malloc_r+0xd6>
 8009a6a:	2c00      	cmp	r4, #0
 8009a6c:	d04b      	beq.n	8009b06 <_malloc_r+0xea>
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	4639      	mov	r1, r7
 8009a72:	4630      	mov	r0, r6
 8009a74:	eb04 0903 	add.w	r9, r4, r3
 8009a78:	f000 f864 	bl	8009b44 <_sbrk_r>
 8009a7c:	4581      	cmp	r9, r0
 8009a7e:	d142      	bne.n	8009b06 <_malloc_r+0xea>
 8009a80:	6821      	ldr	r1, [r4, #0]
 8009a82:	1a6d      	subs	r5, r5, r1
 8009a84:	4629      	mov	r1, r5
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff ffa6 	bl	80099d8 <sbrk_aligned>
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d03a      	beq.n	8009b06 <_malloc_r+0xea>
 8009a90:	6823      	ldr	r3, [r4, #0]
 8009a92:	442b      	add	r3, r5
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	bb62      	cbnz	r2, 8009af8 <_malloc_r+0xdc>
 8009a9e:	f8c8 7000 	str.w	r7, [r8]
 8009aa2:	e00f      	b.n	8009ac4 <_malloc_r+0xa8>
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	1b52      	subs	r2, r2, r5
 8009aa8:	d420      	bmi.n	8009aec <_malloc_r+0xd0>
 8009aaa:	2a0b      	cmp	r2, #11
 8009aac:	d917      	bls.n	8009ade <_malloc_r+0xc2>
 8009aae:	1961      	adds	r1, r4, r5
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	6025      	str	r5, [r4, #0]
 8009ab4:	bf18      	it	ne
 8009ab6:	6059      	strne	r1, [r3, #4]
 8009ab8:	6863      	ldr	r3, [r4, #4]
 8009aba:	bf08      	it	eq
 8009abc:	f8c8 1000 	streq.w	r1, [r8]
 8009ac0:	5162      	str	r2, [r4, r5]
 8009ac2:	604b      	str	r3, [r1, #4]
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	f000 f82f 	bl	8009b28 <__malloc_unlock>
 8009aca:	f104 000b 	add.w	r0, r4, #11
 8009ace:	1d23      	adds	r3, r4, #4
 8009ad0:	f020 0007 	bic.w	r0, r0, #7
 8009ad4:	1ac2      	subs	r2, r0, r3
 8009ad6:	bf1c      	itt	ne
 8009ad8:	1a1b      	subne	r3, r3, r0
 8009ada:	50a3      	strne	r3, [r4, r2]
 8009adc:	e7af      	b.n	8009a3e <_malloc_r+0x22>
 8009ade:	6862      	ldr	r2, [r4, #4]
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	bf0c      	ite	eq
 8009ae4:	f8c8 2000 	streq.w	r2, [r8]
 8009ae8:	605a      	strne	r2, [r3, #4]
 8009aea:	e7eb      	b.n	8009ac4 <_malloc_r+0xa8>
 8009aec:	4623      	mov	r3, r4
 8009aee:	6864      	ldr	r4, [r4, #4]
 8009af0:	e7ae      	b.n	8009a50 <_malloc_r+0x34>
 8009af2:	463c      	mov	r4, r7
 8009af4:	687f      	ldr	r7, [r7, #4]
 8009af6:	e7b6      	b.n	8009a66 <_malloc_r+0x4a>
 8009af8:	461a      	mov	r2, r3
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d1fb      	bne.n	8009af8 <_malloc_r+0xdc>
 8009b00:	2300      	movs	r3, #0
 8009b02:	6053      	str	r3, [r2, #4]
 8009b04:	e7de      	b.n	8009ac4 <_malloc_r+0xa8>
 8009b06:	230c      	movs	r3, #12
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 f80c 	bl	8009b28 <__malloc_unlock>
 8009b10:	e794      	b.n	8009a3c <_malloc_r+0x20>
 8009b12:	6005      	str	r5, [r0, #0]
 8009b14:	e7d6      	b.n	8009ac4 <_malloc_r+0xa8>
 8009b16:	bf00      	nop
 8009b18:	2000099c 	.word	0x2000099c

08009b1c <__malloc_lock>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	@ (8009b24 <__malloc_lock+0x8>)
 8009b1e:	f000 b84b 	b.w	8009bb8 <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	20000adc 	.word	0x20000adc

08009b28 <__malloc_unlock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	@ (8009b30 <__malloc_unlock+0x8>)
 8009b2a:	f000 b846 	b.w	8009bba <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20000adc 	.word	0x20000adc

08009b34 <memset>:
 8009b34:	4402      	add	r2, r0
 8009b36:	4603      	mov	r3, r0
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d100      	bne.n	8009b3e <memset+0xa>
 8009b3c:	4770      	bx	lr
 8009b3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b42:	e7f9      	b.n	8009b38 <memset+0x4>

08009b44 <_sbrk_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d06      	ldr	r5, [pc, #24]	@ (8009b60 <_sbrk_r+0x1c>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	f7f7 f912 	bl	8000d78 <_sbrk>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_sbrk_r+0x1a>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_sbrk_r+0x1a>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20000ad8 	.word	0x20000ad8

08009b64 <__errno>:
 8009b64:	4b01      	ldr	r3, [pc, #4]	@ (8009b6c <__errno+0x8>)
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	2000002c 	.word	0x2000002c

08009b70 <__libc_init_array>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4d0d      	ldr	r5, [pc, #52]	@ (8009ba8 <__libc_init_array+0x38>)
 8009b74:	4c0d      	ldr	r4, [pc, #52]	@ (8009bac <__libc_init_array+0x3c>)
 8009b76:	1b64      	subs	r4, r4, r5
 8009b78:	10a4      	asrs	r4, r4, #2
 8009b7a:	2600      	movs	r6, #0
 8009b7c:	42a6      	cmp	r6, r4
 8009b7e:	d109      	bne.n	8009b94 <__libc_init_array+0x24>
 8009b80:	4d0b      	ldr	r5, [pc, #44]	@ (8009bb0 <__libc_init_array+0x40>)
 8009b82:	4c0c      	ldr	r4, [pc, #48]	@ (8009bb4 <__libc_init_array+0x44>)
 8009b84:	f000 f864 	bl	8009c50 <_init>
 8009b88:	1b64      	subs	r4, r4, r5
 8009b8a:	10a4      	asrs	r4, r4, #2
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	42a6      	cmp	r6, r4
 8009b90:	d105      	bne.n	8009b9e <__libc_init_array+0x2e>
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b98:	4798      	blx	r3
 8009b9a:	3601      	adds	r6, #1
 8009b9c:	e7ee      	b.n	8009b7c <__libc_init_array+0xc>
 8009b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba2:	4798      	blx	r3
 8009ba4:	3601      	adds	r6, #1
 8009ba6:	e7f2      	b.n	8009b8e <__libc_init_array+0x1e>
 8009ba8:	08009c90 	.word	0x08009c90
 8009bac:	08009c90 	.word	0x08009c90
 8009bb0:	08009c90 	.word	0x08009c90
 8009bb4:	08009c94 	.word	0x08009c94

08009bb8 <__retarget_lock_acquire_recursive>:
 8009bb8:	4770      	bx	lr

08009bba <__retarget_lock_release_recursive>:
 8009bba:	4770      	bx	lr

08009bbc <_free_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d041      	beq.n	8009c48 <_free_r+0x8c>
 8009bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc8:	1f0c      	subs	r4, r1, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bfb8      	it	lt
 8009bce:	18e4      	addlt	r4, r4, r3
 8009bd0:	f7ff ffa4 	bl	8009b1c <__malloc_lock>
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c4c <_free_r+0x90>)
 8009bd6:	6813      	ldr	r3, [r2, #0]
 8009bd8:	b933      	cbnz	r3, 8009be8 <_free_r+0x2c>
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	6014      	str	r4, [r2, #0]
 8009bde:	4628      	mov	r0, r5
 8009be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be4:	f7ff bfa0 	b.w	8009b28 <__malloc_unlock>
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d908      	bls.n	8009bfe <_free_r+0x42>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf01      	itttt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	1809      	addeq	r1, r1, r0
 8009bfa:	6021      	streq	r1, [r4, #0]
 8009bfc:	e7ed      	b.n	8009bda <_free_r+0x1e>
 8009bfe:	461a      	mov	r2, r3
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	b10b      	cbz	r3, 8009c08 <_free_r+0x4c>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d9fa      	bls.n	8009bfe <_free_r+0x42>
 8009c08:	6811      	ldr	r1, [r2, #0]
 8009c0a:	1850      	adds	r0, r2, r1
 8009c0c:	42a0      	cmp	r0, r4
 8009c0e:	d10b      	bne.n	8009c28 <_free_r+0x6c>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	4401      	add	r1, r0
 8009c14:	1850      	adds	r0, r2, r1
 8009c16:	4283      	cmp	r3, r0
 8009c18:	6011      	str	r1, [r2, #0]
 8009c1a:	d1e0      	bne.n	8009bde <_free_r+0x22>
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	6053      	str	r3, [r2, #4]
 8009c22:	4408      	add	r0, r1
 8009c24:	6010      	str	r0, [r2, #0]
 8009c26:	e7da      	b.n	8009bde <_free_r+0x22>
 8009c28:	d902      	bls.n	8009c30 <_free_r+0x74>
 8009c2a:	230c      	movs	r3, #12
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	e7d6      	b.n	8009bde <_free_r+0x22>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	1821      	adds	r1, r4, r0
 8009c34:	428b      	cmp	r3, r1
 8009c36:	bf04      	itt	eq
 8009c38:	6819      	ldreq	r1, [r3, #0]
 8009c3a:	685b      	ldreq	r3, [r3, #4]
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	bf04      	itt	eq
 8009c40:	1809      	addeq	r1, r1, r0
 8009c42:	6021      	streq	r1, [r4, #0]
 8009c44:	6054      	str	r4, [r2, #4]
 8009c46:	e7ca      	b.n	8009bde <_free_r+0x22>
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	2000099c 	.word	0x2000099c

08009c50 <_init>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr

08009c5c <_fini>:
 8009c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5e:	bf00      	nop
 8009c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c62:	bc08      	pop	{r3}
 8009c64:	469e      	mov	lr, r3
 8009c66:	4770      	bx	lr
